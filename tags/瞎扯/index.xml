<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>瞎扯 on 与或非 - AND OR NOT</title><link>https://andornot.xyz/tags/%E7%9E%8E%E6%89%AF/</link><description>Recent content in 瞎扯 on 与或非 - AND OR NOT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 31 Dec 2021 19:56:10 +0800</lastBuildDate><atom:link href="https://andornot.xyz/tags/%E7%9E%8E%E6%89%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>可组合性是 VIM 最强大的理念</title><link>https://andornot.xyz/posts/composability-in-vim/</link><pubDate>Fri, 31 Dec 2021 19:56:10 +0800</pubDate><guid>https://andornot.xyz/posts/composability-in-vim/</guid><description>&lt;p>个人认为 &lt;strong>VIM&lt;/strong> 中各种指令的可组合性，是 &lt;strong>VIM&lt;/strong> 保持经久不衰的最深层次的源泉，是实现各种高效操作的基石。&lt;/p>
&lt;p>使用过 &lt;strong>VIM&lt;/strong> 的人都知道，可以使用简短的 &lt;strong>VIM&lt;/strong> 快捷键完成一些相对复杂的操作。以个人经常使用的快捷键 &lt;code>ciw&lt;/code> 为例，&lt;code>ciw&lt;/code> 并不是一个完整独立的命令，而是由 &lt;em>c&lt;/em>、&lt;em>i&lt;/em>、&lt;em>w&lt;/em> 这 3 个命令组合起来，其中 &lt;em>c&lt;/em> 为 Change 即修改，&lt;em>i&lt;/em> 为 Inner 即内部，&lt;em>w&lt;/em> 为 Word 即单词，整个命令组合并直译过来，即为“修改内部的单词”，实际上的效果是修改当前光标选中的单词。正是因为这些原子命令的可组合性，允许这些命令可以有机地结合，实现 1+1 &amp;gt; 2 的效果。一旦这种可组合性的特性让使用者产生印象，便会给人一种这样的隐喻：「组合中的指令是可以替换的」，使用者可能会通过自己的想法，在可组合的规则内自由的尝试其他的组合。例如将 &lt;code>ciw&lt;/code> 中的 &lt;em>c&lt;/em> 替换为 &lt;em>d&lt;/em>，&lt;code>diw&lt;/code> 这个指令即代表删除当前光标所在的单词，如果替换为 &lt;em>y&lt;/em>，&lt;code>yiw&lt;/code> 即代表复制当前光标所在的单词。&lt;strong>VIM&lt;/strong> 在这样用户的自由地实践中，通常会诞生一些连作者都未曾设想的操作，这使得 &lt;strong>VIM&lt;/strong> 在用户的使用「迭代」中迸发出惊人的生产力。&lt;/p>
&lt;p>可组合性不仅仅是 &lt;strong>VIM&lt;/strong> 中最强大的理念，同时也是软件领域最为强大的武器。&lt;/p>
&lt;ol>
&lt;li>编程语言只提供少量的关键词及对应的约束规则，使用有限的元件「组合」出可运行的程序。&lt;/li>
&lt;li>UNIX 中通过管道（pipe）将功能不同的程序组合成一个整体实现复杂的数据操作。&lt;/li>
&lt;li>互联网中使用不同的通信协议或者 API 将不同的软件和服务组合起来，实现更加复杂的互动结构。&lt;/li>
&lt;/ol></description></item></channel></rss>