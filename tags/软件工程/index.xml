<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件工程 on 与或非 - AND OR NOT</title><link>https://andornot.xyz/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 软件工程 on 与或非 - AND OR NOT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 19 Sep 2022 21:47:10 +0800</lastBuildDate><atom:link href="https://andornot.xyz/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>《Software Engineering at Google》 摘要 02：如何融入团队？</title><link>https://andornot.xyz/posts/software-engineering-at-google-note-02/</link><pubDate>Mon, 19 Sep 2022 21:47:10 +0800</pubDate><guid>https://andornot.xyz/posts/software-engineering-at-google-note-02/</guid><description>&lt;img src="https://andornot.xyz/software-engineering-at-google-note-02-cover.png" alt="Featured image of post 《Software Engineering at Google》 摘要 02：如何融入团队？" />&lt;p>&lt;strong>该文章为笔者读 &lt;a class="link" href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Chapter-2_How_to_Work_Well_on_Teams/Chapter-2_How_to_Work_Well_on_Teams" target="_blank" rel="noopener"
>Software Engineering at Google&lt;/a> 时所记摘要，录以备考假以时日待作感悟。&lt;/strong>&lt;/p>
&lt;p>软件开发是团队的努力。要在工程团队或任何其他创造性合作中取得成功，你需要围绕谦逊、尊重和信任的核心原则重新定义你的行为。&lt;/p>
&lt;p>人们害怕别人看到和评价他们正在进行的工作。从某种意义上说，缺乏安全感是人性的一部分——没有人喜欢被批评，尤其是那些没有完成的事情。认识到这个主题让我们看到了软件开发中一个更普遍的趋势：缺乏安全实际上是一个更大问题的征兆。&lt;/p>
&lt;p>在内心深处，许多工程师暗中希望被视为天才。这种幻想是这样的：你会被一个了不起的新概念所震撼。你消失数周或数月躲在洞穴中，努力实现你的理想。然后世界上「发布」你的软件，用你的天才震撼每个人。你的同龄人对你的聪明感到惊讶。人们排队使用你的软件。名利自然随之而来。&lt;/p>
&lt;p>人类有寻找领导者和榜样的本能，崇拜他们，并试图模仿他们。我们都需要英雄来激发灵感，编程世界也有自己的英雄。「科技名人」已经几乎被神化，我们都想写一些改变世界的东西，比如 Linux 或者设计下一种优秀的编程语言。&lt;/p>
&lt;p>事实证明，这种天才神话只是我们缺乏安全感的另一种表现。许多程序员害怕分享他们刚刚开始的工作，因为这意味着同行会看到他们的错误，知道代码的作者不是天才。&lt;/p>
&lt;p>如果你把所有的时间都花在独自工作上，增加了不必要失败的风险，耽误了你的成长潜力。尽管软件开发是一项需要高度集中精力和独处时间的深度智力工作，但你必须权衡协作和审查的价值（以及需求！）。&lt;/p>
&lt;p>如果你对世界隐瞒你的牛逼想法，并在未完美之前拒绝向任何人展示，那么你就是在进行一场下注巨大的赌博。早期很容易犯基本的设计错误。你冒着重新发明轮子的风险。而且你也失去了协作的好处：注意到你的邻居通过与他人合作而效率有多高？这就是人们在跳入深水区之前将脚趾浸入水中的原因：你需要确保你在做正确的事情，你在做正确的事情，而且以前从未做过。早期失误的可能性很高。你越早征求反馈，这种风险就越低。记住**「早失败、快失败、经常失败」**这句经得起考验的至理名言。&lt;/p>
&lt;p>&lt;strong>巴士因子：团队里因巴士撞倒的多少人，会导致项目失败。&lt;/strong>&lt;/p>
&lt;p>你的项目中的知识和技能分散程度如何？如果你是唯一了解原型代码工作原理的人，你需要会受到良好的工作保障，但如果你被公交车撞倒，项目就完蛋了。但是，如果你与同事合作，你的巴士因子就翻了一番。如果你有一个小团队一起进行设计和制作原型，情况会更好——当团队某个成员消失时，项目不会被孤立。记住：团队成员可能不会被公交车撞到，但其他不可预知的事件仍然会发生。有人可能会结婚、搬走、离开公司或请假照顾生病的亲属。确保每个责任领域除了一个主要和一个次要所有者之外，至少还有可用的文档，这有助于确保项目的成功，提高项目的成功率。希望大多数工程师认识到，&lt;strong>成为成功项目的一部分比成为失败项目的关键部分要好&lt;/strong>。&lt;/p>
&lt;p>当前 DevOps 对技术生产力的理念明确了这些目标：尽早获得反馈，尽早进行测试，尽早考虑安全和生产环境。这一切都与开发人员工作流程中的“左移”思想捆绑在一起；我们越早发现问题，修复它的成本就越低。&lt;/p>
&lt;p>「隐藏」归结起来就是：独自工作比与他人一起工作具有更高的内在风险。即使你可能害怕有人窃取你的想法或认为你不聪明，你更应该担心浪费大量时间在错误的事情上。&lt;/p>
&lt;p>在编程领域，孤独的工匠极其罕见，即使他们确实存在，他们也不会在真空中完成超人的成就；他们改变世界的成就几乎总是灵感迸发、团队英勇努力的结果。一个伟大的团队能够出色地利用它的超级明星，但整体总是大于各部分的总和。但打造一支集合多个超级明星球队是极其困难的。让我们把这个想法用更简单的话来说：&lt;strong>软件工程是一个团队的努力&lt;/strong>。&lt;/p>
&lt;p>你不能通过隐藏和准备你的秘密发明来改变世界或取悦数百万计的用户。你需要和其他人一起工作。分享你的愿景，分工，向别人学习，创建一个出色的团队。&lt;/p>
&lt;ul>
&lt;li>支柱 1：&lt;strong>谦逊&lt;/strong> 你不是宇宙的中心（你的代码也不是！）。你既不是全方位的，也不是绝对正确的。你愿意不断提升自我。&lt;/li>
&lt;li>支柱 2：&lt;strong>尊重&lt;/strong> 你真诚地关心与你一起工作的人。你善待他们，欣赏他们的能力和成就。&lt;/li>
&lt;li>支柱 3：&lt;strong>信任&lt;/strong> 你相信其他人有能力并且会做正确的事情，你可以让他们在适当的时候牵头。&lt;/li>
&lt;/ul>
&lt;p>不要低估社交游戏的力量。这不是欺骗或操纵人们；这是关于建立关系来完成事情。关系总是比项目更长久。&lt;/p>
&lt;p>我们普遍认为，如果你没有遭遇过失败，你就没有足够的创新或承担足够的风险的能力。失败被视为一个黄金机会，可以在下一次尝试中学习和改进。事实上，人们经常引用托马斯·爱迪生的话说：「如果我发现有一万种方法不能成功，我就没有失败。我并不气馁，因为每一个被抛弃的错误尝试都是向前迈出的另一步」。&lt;/p>
&lt;p>从错误中学习的关键是通过进行根因分析和撰写「事后总结」来记录你的失败，在谷歌（和许多其他公司）成为事后总结（国内成为复盘）。要格外小心，确保 「事后总结」文件不只是一份无用的道歉、借口或指责的清单，这不是它的目的。正确事后总结应该总是包含对所学到的内容的解释，以及作为学习经验作为后续的改进落地。然后，确保事后总结可以随时查阅，并确保团队真正贯彻执行所建议的改变。好的故障复盘要让其他人（现在和将来）知道发生了什么，避免重蹈覆辙。不要抹去你的足迹——让它们在道路上照亮给那些追随你的人!&lt;/p>
&lt;p>一个好的事后总结应该包括以下内容：事件的简要概述事件的时间线，从发现、调查到解决的过程事件的主要原因影响和损害评估一套立即解决该问题的行动项目（包括执行人）。一套防止事件再次发生的行动项目经验教训&lt;/p>
&lt;p>要想让别人正确地听取你的意见，你首先需要倾听别人的意见。最好在下定决心或坚定地宣布决定之前进行倾听——如果你不断地改变主意，人们会认为你不坚定。&lt;/p>
&lt;p>从长远来看，承认自己犯了错误，或者根本不在你的能力范围，都会提高你的地位。事实上，表达脆弱性的意愿是一种谦逊的外在表现，它表明了责任感和承担责任的意愿，也是你信任他人意见的信号。作为回报，人们最终会尊重你的诚实和力量。有时，你能做的最好的事情就是说，「我不知道」。&lt;/p>
&lt;p>在模棱两可中茁壮成长即使在环境不断变化的情况下，也能处理相互冲突的信息或方向，建立共识，并对问题做出改进。重视反馈谦虚优雅地接受和给出反馈，理解反馈对个人（和团队）发展的价值。走出舒适区 能够设定宏伟的目标并去追求，即使有来自他人的抵制或惰性。&lt;/p>
&lt;p>&lt;strong>客户第一&lt;/strong> 对谷歌产品的用户抱有同情和尊重，并追求符合其最佳利益的行动。&lt;/p>
&lt;p>&lt;strong>关心团队&lt;/strong> 对同事抱有同情心和尊重，并积极主动地帮助他们，提高团队凝聚力。&lt;/p>
&lt;p>&lt;strong>做正确的事&lt;/strong> 对自己所做的一切有强烈的主人感；愿意做出困难或不易的决定以保护团队和产品的完整。&lt;/p>
&lt;p>几乎任何规模的软件工作的基础都是一个运作良好的团队。尽管软件开发者单打独斗的「天才神话 」仍然存在，但事实是，没有人能够真正地单干。一个软件组织要想经受住时间的考验，就必须有一种健康的文化，植根于谦逊、信任和尊重，围绕着团队而不是个人。此外，软件开发的创造性要求人们承担风险并偶尔失败；为了让人们接受这种失败，必须有一个健康的团队环境。&lt;/p></description></item><item><title>《Software Engineering at Google》 摘要 01：软件工程是什么？</title><link>https://andornot.xyz/posts/software-engineering-at-google-note-01/</link><pubDate>Thu, 08 Sep 2022 22:12:10 +0800</pubDate><guid>https://andornot.xyz/posts/software-engineering-at-google-note-01/</guid><description>&lt;img src="https://andornot.xyz/software-engineering-at-google-note-01-cover.png" alt="Featured image of post 《Software Engineering at Google》 摘要 01：软件工程是什么？" />&lt;p>&lt;strong>该文章为笔者读 &lt;a class="link" href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Chapter-1_What_Is_Software_Engineering/Chapter-1_What_Is_Software_Engineering" target="_blank" rel="noopener"
>Software Engineering at Google&lt;/a> 时所记摘要，录以备考假以时日待作感悟。&lt;/strong>&lt;/p>
&lt;p>软件工程可以被认为是 &lt;strong>「随着时间推移而整合的编程」&lt;/strong>。&lt;/p>
&lt;p>本书强调了三个基本原则，我们认为软件组织在设计、架构和编写代码时应该牢记这些原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>时间和变化&lt;/strong> ​ 代码如何展期生命周期内进行适配。&lt;/li>
&lt;li>&lt;strong>规模和增长&lt;/strong> ​ 一个组织如何适应它的发展过程。&lt;/li>
&lt;li>&lt;strong>权衡和成本&lt;/strong> ​ 一个组织如何根据时间和变化以及规模和增长的经验教训做出决策。
编程和软件工程之间有三个关键的区别：时间、规模和权衡取舍。&lt;/li>
&lt;/ul>
&lt;p>在一个软件工程项目中，工程师需要更多关注时间成本和需求变更。在软件工程中，我们需要更加关注规模和效率，无论是对我们生产的软件，还是对生产软件的组织。最后，作为软件工程师，我们被要求做出更复杂的决策，其结果风险更大，而且往往是基于对时间和规模增长的不确定性的预估。&lt;/p>
&lt;p>了解时间对程序的影响的一种方法是思考「代码的预期生命周期是多少？」&lt;/p>
&lt;ul>
&lt;li>通常，周期短的代码不受时间的影响。对于一个只需要存活一个小时的程序，你不太可能考虑其适应基础库、操作系统（OS）、硬件或语言版本的新版本。这些短期系统实际上“只是”一个编程问题，就像在一个维度中压缩得足够扁的立方体是正方形一样。随着我们扩大时间维度，允许更长的生命周期，改变显得更加重要。在十年或更长的时间里，大多数程序依赖关系，无论是隐式的还是显式的，都可能发生变化。这一认识是我们区分软件工程和编程的根本原因。&lt;/li>
&lt;li>如果在软件的预期生命周期内，你能够对任何有价值的变化做出反应，无论是技术还是商业原因，那么你的项目是可持续的。重要的是，我们只关注能力——你可能因为缺乏价值或其他优先事项而选择不进行特定的升级。当你基本上无法对基础技术或产品方向的变化做出反应时，你就把高风险赌注押在希望这种变化永远不会变得至关重要。对于短期项目，这可能是一个安全的赌注。几十年后，情况可能并非如此。&lt;/li>
&lt;/ul>
&lt;p>另一种看待软件工程的方法是考虑规模。有多少人参与？随着时间的推移，他们在开发和维护中扮演什么角色？&lt;/p>
&lt;p>团队协作带来了新的问题，但也提供了比任何单个程序员更多的潜力来产生有价值的系统。&lt;/p>
&lt;p>软件工程与编程的不同之处在于需要做出的决策的复杂性及其风险。在软件工程中，我们经常被迫在几个路径之间做评估和权衡，有时风险很高，而且价值指标不完善。软件工程师或软件工程负责人的工作目标是实现组织、产品和开发工作流程的可持续性和管理扩展成本为目标。考虑到这些投入，评估你的权衡并做出理性的决定。有时，我们可能会推迟维护更改，甚至接受扩展性不好的策略，因为我们知道需要重新审视这些决策。这些决策应该是明确的和清晰的递延成本。&lt;/p>
&lt;p>&lt;strong>Hyrum&amp;rsquo;s Law 海勒姆定律&lt;/strong>：「当一个 API 有足够多的用户的时候，在约定中你承诺的什么都无所谓，所有在你系统里面被观察到的行为都会被一些用户直接依赖。」&lt;/p>
&lt;p>对随时间变化和维护的讨论必须了解海勒姆定律，正如对效率或热力学的讨论必须注意熵一样。仅仅因为熵从不减少并不意味着我们不应该努力提高效率。在维护软件时，海勒姆定律会适用，但这并不意味着我们不能对它进行规划或试图更好地了解它。我们可以减轻它，但我们知道，它永远不可能被根除。
海勒姆定律代表了一种实践知识，即使有最好的规划、最好的工程师和可靠的代码评审实践，我们也不能假设完全遵守已发布的契约或最佳实践。作为 API 所有者，通过明确地接口约定，你将获得一定的灵活性和自由度，但在实践中，给定更改的复杂性和难度还取决于用户对你的 API 的一些可观察行为的有用程度。如果用户不能依赖这些东西，那么你的 API 将很容易更改。如果有足够的时间和足够的用户，即使是最无害的变更也会破坏某些东西；你对变更价值的分析必须包含调查、识别和解决这些缺陷的难度。&lt;/p>
&lt;p>依赖其依赖性的脆弱和未发布特性的代码可能被描述为「黑客」或「聪明」遵循最佳实践并为未来规划的代码更可能被描述为「干净」和「可维护」。两者都有其目的，但你选择哪一个关键取决于所讨论代码的预期生命周期。我们常说，「如果『聪明』是一种恭维，那就是程序，如果『聪明』是一种指责，那就是软件工程。」&lt;/p>
&lt;p>最初的设计可能完全符合逻辑，并遵循合理的最佳实践。只有在向后兼容的变化演变之后，新的、更有效的选择才变得重要。虽然没有犯错误，但随着时间的推移，变化仍然是有价值的。&lt;/p>
&lt;p>我们的工程师的工作量是否随着组织的规模而增长？工作是否随着代码库的大小而变多？如果这两种情况都是真实的，我们是否有机制来自动化或优化这项工作？如果没有，我们就有扩展问题。
自动化（这样一个人就可以做到更多）、整合/一致性（这样低级别的更改影响有限的问题范围）和专业知识（以便少数人就可以做得更多）。&lt;/p>
&lt;p>如果安全问题是在产品投入生产后才发现的，修复的成本就非常高。如果在部署到生产之前就发现了安全问题，那也需要花费大量的工作来检测和修复问题，但成本更低些。如果你能够在最初的开发之前发现安全问题，将缺陷提交到版本控制就被发现，修复的成本更低：他们已经了解该功能；根据新的安全约束规范进行开发，要比提交代码后再让其他人分类标识并修复它更简单。&lt;/p>
&lt;p>我们看到的一个普遍真理是，在开发人员的工作流程中发现的问题，通常可以降低成本。考虑开发人员工作流程的时间表，从左到右，从概念和设计开始，通过实施、评审、测试、提交、金丝雀和最终的生产部署来进行。在此时间线之前，将问题发现转移到“左侧”会使修问题解决成本更低&lt;/p>
&lt;p>“成本”大致可以转化为努力的方向，可以包括以下任何或所有因素：&lt;/p>
&lt;ul>
&lt;li>财务成本（如金钱）&lt;/li>
&lt;li>资源成本（如 CPU 时间）&lt;/li>
&lt;li>人员成本（例如，工作量）&lt;/li>
&lt;li>交易成本（例如，采取行动的成本是多少？）&lt;/li>
&lt;li>机会成本（例如，不采取行动的成本是多少？）&lt;/li>
&lt;li>社会成本（例如，这个选择将对整个社会产生什么影响？）&lt;/li>
&lt;/ul>
&lt;p>工程团队的决策应该归结为几件事：我们这样做是因为我们必须这么做（法律要求、客户要求）。我们之所以这样做，是因为根据当前证据，这是我们当时能看到的最佳选择（由一些适当的决策者决策）。&lt;/p>
&lt;p>&lt;strong>杰文斯悖论（Jevons Paradox）&lt;/strong>：「一种资源的消耗可能会随着使用效率的提高而增加。」&lt;/p>
&lt;p>时间不仅会触发技术依赖和软件系统的变化，还会触发用于驱动决策的数据的变化。&lt;/p>
&lt;p>本质上，在相关系统的生命周期内，需要不时地重新审视决策。对于长期项目而言，在做出初始决策后，有能力改变方向通常是至关重要的。更重要的是，这意味着决策者需要勇气承认错误。与人的本能相反，勇于承认错误的领导人受更多的尊重。&lt;/p>
&lt;p>我们认为，区分相关但不同的术语「编程」和「软件工程」是很重要的。这种差异很大程度上源于随着时间的推移对代码的管理、时间对规模的影响以及面对这些想法的决策。编程是产生代码的直接行为。软件工程是一组策略、实践和工具，这些策略、实践和工具是使代码在需要使用的时间内发挥作用，并允许整个团队的协作。&lt;/p></description></item></channel></rss>