<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on 与或非 - AND OR NOT</title><link>https://andornot.xyz/tags/note/</link><description>Recent content in Note on 与或非 - AND OR NOT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 11 Apr 2023 22:11:10 +0800</lastBuildDate><atom:link href="https://andornot.xyz/tags/note/index.xml" rel="self" type="application/rss+xml"/><item><title>《纳瓦尔宝典》摘要</title><link>https://andornot.xyz/posts/the-almanack-of-naval-ravikant/</link><pubDate>Tue, 11 Apr 2023 22:11:10 +0800</pubDate><guid>https://andornot.xyz/posts/the-almanack-of-naval-ravikant/</guid><description>&lt;img src="https://andornot.xyz/7_The_Origin_of_the_World_by_Borondo_by_Naman_Saraiya.jpg" alt="Featured image of post 《纳瓦尔宝典》摘要" />&lt;p>该文章为笔者读《纳瓦尔宝典》（The Almanack of Naval Ravikant: A Guide to Wealth and Happiness）时所记摘要，录以备考假以时日待作感悟。&lt;/p>
&lt;h2 id="认识财富创造的原理">认识财富创造的原理
&lt;/h2>&lt;p>如何致富（不靠运气）：&lt;/p>
&lt;ul>
&lt;li>追求财富，而不是金钱或地位。&lt;strong>财富是指在你睡觉时仍能为你赚钱的资产&lt;/strong>。金钱是我们转换时间和财富的方式。地位是你在社会等级体系中所处的位置。&lt;/li>
&lt;li>创造财富和坚持道德标准是可以兼得的。如果你内心鄙视财富，财富就会对你避而远之。&lt;/li>
&lt;li>&lt;strong>无视一味追求社会地位的人。他们获得地位的手段就是攻击创造财富的人。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>依靠出租时间是不可能致富的。你必须拥有股权（企业的部分所有权），才能实现财务自由。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>获得财富的一个途径，就是为社会提供其有需求但无从获得的东西，并实现规模化。&lt;/strong>&lt;/li>
&lt;li>选择一个有长期发展前景的行业，找到可以长期合作的人。&lt;/li>
&lt;li>互联网极大地拓展了职业空间，但大多数人还没有清晰地认识到这一点。&lt;/li>
&lt;li>培养迭代思维。生活中所有的回报，无论是财富、人际关系，还是知识，都来自复利。&lt;/li>
&lt;li>选择聪明过人、精力充沛的商业伙伴，但更重要的是，他们要正直诚信。&lt;/li>
&lt;li>不要跟愤世嫉俗和消极悲观的人合作。他们的预言会自我实现。&lt;/li>
&lt;li>学会销售，学会构建，两技傍身，势不可当。&lt;/li>
&lt;li>用专长、责任感和杠杆效应武装自己。&lt;/li>
&lt;li>专长指的是无法通过培训获得的知识。如果社会可以培训你，那么社会也可以培训他人来取代你。&lt;/li>
&lt;li>要想有所专长，就要追求真正的兴趣和热爱，而不是盲目追逐热点。&lt;/li>
&lt;li>累积专长的过程，对你而言就像玩耍，对他人来说则很吃力。&lt;/li>
&lt;li>专长的传授需要通过师傅带徒弟的方式完成，而无法通过学校教育完成。&lt;/li>
&lt;li>&lt;strong>专长往往具有高度的技术性或创造性，不能被外包或自动化。&lt;/strong>&lt;/li>
&lt;li>培养责任感，勇于以个人名义承担商业风险。社会将根据责任大小、股权多少和杠杆效应回报你。&lt;/li>
&lt;li>「给我一根足够长的杠杆和一个支点，我就能撬动地球。」——阿基米德&lt;/li>
&lt;li>&lt;strong>要想获得财富，就必须充分利用杠杆效应。商业杠杆来自资本、劳动力和复制边际成本为零的产品（代码和媒体）。&lt;/strong>&lt;/li>
&lt;li>资本是指金钱。要想获得融资，需要运用自己的专长和责任感，并表现出良好的判断力。&lt;/li>
&lt;li>劳动力杠杆就是让别人为你工作。这是最古老、争夺最激烈的一种杠杆。拥有劳动力杠杆会让你的父母觉得你很了不起，但不要过度追逐劳动力杠杆。&lt;/li>
&lt;li>资本和劳动力是需要获得许可才能使用的杠杆。人人都在追逐资本，但得有人愿意出资。人人都想领导他人，但得有人愿意追随。&lt;/li>
&lt;li>&lt;strong>代码和媒体是不需要许可就能使用的杠杆。这两个杠杆是新富阶层背后的杠杆。你可以创建软件和媒体，让它们在你睡觉时为你工作。&lt;/strong>&lt;/li>
&lt;li>有一大批机器人可供我们免费使用。为了提高热效率、节约空间，这些机器人就集中放在数据中心。用起来吧。&lt;/li>
&lt;li>如果不会写代码，那就出书、写博客、做视频、录播客。&lt;/li>
&lt;li>杠杆是判断力的倍增器。&lt;/li>
&lt;li>判断力从经验中来，但可以通过学习基本技能快速建立起来。&lt;/li>
&lt;li>没有所谓的「商业」技能。不要把时间浪费在商业杂志和商业课程上。&lt;/li>
&lt;li>&lt;strong>学习微观经济学、博弈论、心理学、说服术、伦理学、数学和计算机。&lt;/strong>&lt;/li>
&lt;li>读比听快，做比看快。&lt;/li>
&lt;li>你应该忙得没时间社交，但依然把日程安排得井然有序。&lt;/li>
&lt;li>&lt;strong>设定一个大胆的个人时薪，并严格执行。如果解决一个问题节省的成本低于时薪，那就忽略问题；如果外包一项任务的成本低于时薪，那就选择外包。&lt;/strong>&lt;/li>
&lt;li>工作时要拼尽全力，毫无保留。不过，共事的人和工作的内容比努力程度更重要。&lt;/li>
&lt;li>在自己选择的职业领域里做到全球顶尖。不断重新定义自己的事业，直到理想成为现实。&lt;/li>
&lt;li>世界上没有快速致富的教程。即使有，那也只是提供教程的人想从你身上赚钱。&lt;/li>
&lt;li>运用专长，发挥杠杆效应，最终你会得到自己应得的。&lt;/li>
&lt;li>当你终于变得富有时，你会意识到，这并不是你最初的追求。但这是后话，此处暂且不提。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：把自己产品化。一个是「自己」，一个是「产品化」。「自己」具有独特性，「产品化」是发挥杠杆效应；「自己」具有责任感，「产品化」需要专长。「自己」其实也具有专长。&lt;/strong>&lt;/p>
&lt;p>如果想要实现致富的长期目标，你就应该问问自己：&lt;strong>「这是我真正想要的东西吗？我的规划目标是我真正想要的吗？」&lt;/strong> 得到肯定的答案后，再问问自己：&lt;strong>「我实现产品化了吗？我实现规模化了吗？我选择规模化的方式是劳动力、资本，还是代码或媒体？」&lt;/strong> 由此可见，「把自己产品化」这个阐述方便简单，便于记忆。&lt;/p>
&lt;p>金钱是我们转移财富的方式。金钱是社会的信用符号，具有调用别人时间的能力。&lt;/p>
&lt;p>你真正想要的其实是财富。财富就是在你睡觉时也可以帮你赚钱的资产。财富是可以进行生产的工厂和机器人。财富是不分昼夜为客户服务的计算机程序。财富也可以是银行里被投资于其他资产或业务的钱。&lt;/p>
&lt;p>技术让消费变得更大众化，也让生产变得更集中。在某个领域做到全球顶尖的人，现在可以为世界上任何人提供自己的产品或服务。&lt;/p>
&lt;p>&lt;strong>某种东西一旦得到广泛应用，它就不再是科技了。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>社会总是需要新事物。如果想变得富有，你就要弄清楚你能为社会提供哪些其有需求但无从获得的东西，而提供这些东西对你来说又是轻松自然的事情，在你的技术和能力范围内。&lt;/strong>&lt;/p>
&lt;h2 id="找到天赋所在积累专长">找到天赋所在，积累专长
&lt;/h2>&lt;p>专长无法被教授，但可以被学习。&lt;/p>
&lt;p>在「成为自己」这件事情上，没有人能比得过你。其实，&lt;strong>人生大部分时间都是在寻找，寻找那些最需要你的人，寻找那些最需要你的事情。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>通常情况下，专长属于知识领域的边缘地带。有些领域尚处于发轫或发展阶段，有些领域研究难度很大，这些领域更容易产生专长。&lt;/strong> 如果你在研究的时候不是百分之百投入，其他百分之百投入的人就会超过你。他们的表现会比你好不是一点儿，而是很多，因为我们讨论的是创意领域的竞争。&lt;strong>在创意领域，复利效应非常明显，杠杆效应也非常明显。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>有了互联网，只要你在自己的领域做到最好，只要你能规模化你所提供的特别内容，那么就算你的兴趣很小众，你也能有所发展。&lt;/strong>&lt;/p>
&lt;p>「只有独辟蹊径，才能避开竞争。」&lt;strong>从本质上看，竞争就是模仿，与他人竞争，是因为你跟别人在做一样的事情&lt;/strong>。但是，每个人都是独一无二的，不要模仿他人。&lt;/p>
&lt;p>最好的工作与委任或学位无关。&lt;strong>最好的工作是终身学习者在自由市场中的创造性表达&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>致富最重要的技能是成为终身学习者，无论想学什么，你都得找到途径和方法。以前的赚钱模式是读 4 年大学，拿到学位，在某个专业领域干上 30 年。现在不一样了，时代的发展日新月异，必须在 9 个月内掌握一门新专业，而这门专业在 4 年后就过时了。但在专业存在的这 3 年里，你可以变得非常富有。&lt;/strong>&lt;/p>
&lt;p>比起成为一名数字营销专家或点击优化专员，知道如何增强沟通说服力更重要。打好基础非常关键。在基础知识层面得 90 分或 100 分远胜于盲目地深入钻研。当然，有些东西你需要深入研究，否则你只能做到「样样都通，样样稀松」，无法实现人生目标。&lt;strong>一个人只能在一两件事上做到精通，而这一两件事通常是让你痴迷的事情。&lt;/strong>&lt;/p>
&lt;h2 id="投资交友着眼长远">投资交友，着眼长远
&lt;/h2>&lt;p>个人声誉方面也存在复利效应。如果一个人声誉良好，数十年如一日，不断打造和积累自己的声誉，这个人就一定会得到关注和重视。而如果一个人才华横溢，却没有利用声誉的复利效应，相比之下，注重声誉的人的价值就会高出其成千上万倍。&lt;/p>
&lt;p>你应该在经过深思熟虑后，清醒地认识到自己需要从大多数事情（人际关系、工作、学习）中找到可以尽全力去付出的那部分，以充分获取复利效应。我不是说那 99% 的事情都不要做，因为我们很难确定剩下的 1% 到底是什么。我的意思是：努力找到不会被浪费的 1%。这 1%对你是有意义的，值得你用余生去追求。一旦找到，你就要心无旁骛，全力以赴。&lt;/p>
&lt;h2 id="承担责任">承担责任
&lt;/h2>&lt;p>获得财富需要杠杆。杠杆可以来自劳动力、资本、代码或媒体。劳动力和资本等大多数杠杆需要有给予方。要获取劳动力，必须有人追随你。要获得资本，需要有人为你提供资金、管理资产或机械设备。&lt;/p>
&lt;p>要得到劳动力或资本，必须建立信誉，尽可能以个人信誉做担保，而这种操作存在风险。因此，责任是把双刃剑：进展顺利，责任人会得到褒奖；一旦失败，责任人就会首当其冲。&lt;/p>
&lt;p>明确的责任分配非常重要。没有责任，就没有动力。没有责任，就无法建立可信度。但责任也意味着风险：失败的风险，被羞辱的风险，以个人名誉承担失败的风险。&lt;/p>
&lt;p>那些有能力以个人名义在公众面前承担失败风险的人，会获得很大的原动力。&lt;/p>
&lt;h2 id="创立企业或买入股权">创立企业或买入股权
&lt;/h2>&lt;p>如果你是通过出租时间来换取报酬的，即使从事律师和医生等高薪职业，你能够获得的报酬也非常有限，不足以让你实现财务自由。而如果拥有企业股权，你就可以获得被动收入——即使你在度假，企业也在帮你赚钱。&lt;/p>
&lt;p>如果不持有企业股权，个人投入和收益的关联性就会非常强。几乎所有领取月薪的工作，即便是律师或医生这样的高薪职业，也需要投入时间才能获得相应的收入。&lt;/p>
&lt;p>如果不持有企业股权，睡觉的时候没有收入，退休以后没有收入，度假期间也没有收入。总之，收入是相对固定的，根本无法实现实质性突破。&lt;/p>
&lt;p>&lt;strong>从本质上看，上班就是给人打工。而企业所有者在承担风险和责任的同时也拥有知识产权和品牌效应。所以，他们支付给你的报酬一定低于你创造的价值。为了让你工作，他们会给你提供最低限度的报酬。这个最低限度的报酬可能很高，但依然不是真正的财富，因为你退休后，这份收入将难以为继。&lt;/strong>&lt;/p>
&lt;p>拥有企业股权意味着可以获得企业发展的收益。&lt;/p>
&lt;p>但通常情况下，真正的财富是通过创建公司或者通过投资创造出来的。投资公司也是买入企业的股权。这些都是获得财富的途径。总之，&lt;strong>真正的财务自由都不是靠单纯地投入大量时间来实现的&lt;/strong>。&lt;/p>
&lt;h2 id="找到杠杆">找到杠杆
&lt;/h2>&lt;p>想要打造良好的职业基础，就要追随自己真正的求知欲上下求索，而不是盲目跟风眼下赚钱的热门行业。&lt;/p>
&lt;p>正是在独特的热爱和爱好的驱动下，我们才得以掌握只有自己或一小部分人才知道的知识。如果能够把求知欲和兴趣爱好结合、相融，我们就更有可能找到自己的所爱。&lt;/p>
&lt;p>如果一件事物一开始让你兴致盎然，后来又让你觉得索然无味，那么它只是暂时分散了你的注意力，并不是你心智上真正的好奇所在。请继续寻找。&lt;/p>
&lt;p>如果在追随好奇心和求知欲的过程中又满足了社会需求，你就能得到优厚的经济回报。&lt;/p>
&lt;p>&lt;strong>你更有可能获得这个社会还不能通过培训提供的技能。如果社会可以培训他人，这些人就可以取代你。如果你可以被轻易取代，社会就不需要为你支付重酬。要时刻牢记，掌握社会所需的独门绝技才是占据职业制高点的不二法门。&lt;/strong>&lt;/p>
&lt;p>认真想一想，社会上还有哪些尚未得到满足的需求，而你怎样才能成为第一个提供相关产品或服务的人，并将其规模化。这才是赚钱真正的挑战。&lt;/p>
&lt;p>第一种是&lt;strong>劳动力杠杆&lt;/strong>，也就是让别人给你打工。劳动力杠杆是一种最古老的杠杆，但在现代社会，这种杠杆的效果并不是最好的。我甚至认为这是一种最落后的杠杆。因为管理他人是一件非常复杂、极具挑战的工作，需要高超的领导技巧，弄不好管理者会落个众叛亲离、被手下生吞活剥的下场。&lt;/p>
&lt;p>资本是第二种相对较好的杠杆形式。&lt;strong>资本杠杆就是用钱来扩大决策的影响力&lt;/strong>。资本是一种更现代的杠杆形式，利用资本杠杆有一定的难度，需要一定的技能。在 20 世纪，人们曾经利用资本杠杆获得了惊人的财富。资本杠杆是 20 世纪杠杆的主要形式。&lt;/p>
&lt;p>最后一种杠杆是最新出现的，也是普通人最触手可及的。这种杠杆就是**「复制边际成本为零的产品」**。&lt;/p>
&lt;p>其中包括&lt;strong>书籍、媒体、电影、代码&lt;/strong>。在所有不需要他人许可就能使用的杠杆中，代码可以说是最强大的一种——只需要一台计算机就够了。&lt;/p>
&lt;p>复制边际成本为零的产品是最值得研究的杠杆，也是最重要的杠杆。这是一种全新的杠杆形式，问世仅几百年。这种杠杆始于印刷机。广播媒体加速了其发展，而互联网和编程的出现更是使其产生了爆发式增长。不需要他人为你打工，也不需要他人给你投资，你就可以把劳动成果放大成百上千倍。&lt;/p>
&lt;p>&lt;strong>新杠杆最重要的特点之一就是，使用它们或获得成功都无须经过他人的许可。要使用劳动力杠杆，就得有人决定追随你。要使用资本杠杆，就得有人给你提供资金，你再去进行投资或开发产品。&lt;/strong>&lt;/p>
&lt;p>无论处于人生的哪个阶段，努力的目标都是不断提高自己的独立性，而不是升职加薪。拥有独立性，为自己独特的产出成果负责（而不是像打工一样为投入的时间负责），这才是最理想的状态。&lt;/p>
&lt;p>&lt;strong>每周工作 40 小时是工业时代的产物。知识劳动者的时间安排与运动员如出一辙，有训练和冲刺的时间，也有休息和重新评估的时间。&lt;/strong>&lt;/p>
&lt;p>投入和产出之所以脱节，是因为工具和杠杆的存在。一个职业的创造性越高，其投入与产出的不匹配性越高。而投入和产出高度相关的职业很难创造财富，从事这种职业也很难给自己带来财富。&lt;/p>
&lt;p>&lt;strong>想加入一家伟大的科技公司，销售技能和构建技能必备其一。如果二者都不具备，那就去学习。&lt;/strong>&lt;/p>
&lt;p>销售和构建是两个非常宽泛的概念。构建产品很难，因为涉及多个变量，涵盖设计、开发、制造、物流、采购等环节，甚至还包括服务的设计和运营。因此，「构建」的定义非常多元。每个行业都定义了各自的「构建者」。在我们科技行业，「构建者」是首席技术官，是程序员，是软件工程师和硬件工程师。即便是洗衣行业，也存在「构建者」。洗衣行业的「构建者」就是设计洗衣服务的人，是确保流程正常运转的人，是确保所有衣服在正确的时间被运送至正确地点的人，等等。&lt;/p>
&lt;p>另一个概念是销售。销售的定义同样很宽泛。销售不一定是针对个体顾客销售产品，也可以指市场营销、媒体传播、人才招聘、资金募集、员工激励、公共关系等，涉及面非常广。&lt;/p>
&lt;p>不要做可能会让你全盘皆输的事情。不要孤注一掷、铤而走险。相反，要把赌注押在那些胜算较大、能带来巨大利益的事情上。&lt;/p>
&lt;h2 id="用判断力赚钱">用判断力赚钱
&lt;/h2>&lt;p>我认为每个人都应该立志掌握某些领域的专业知识，并以此赚取经济回报。如果能够在实际工作中最大化地利用杠杆，无论是机器人、计算机，还是其他任何人或技术，那么我们都可以成为自己时间的主人，因为没有人会考核我们在工作中投入了多少时间，我们只需要对自己的产出负责。&lt;/p>
&lt;p>&lt;strong>首席执行官的报酬之所以很高，就是因为杠杆效应。在判断力和能力上，毫厘之差都会有天壤之别。&lt;/strong>&lt;/p>
&lt;p>只要在优秀的基础上稍微提高一点儿，做到卓越（比如把完成 1/4 英里的短跑成绩提高零点秒），经济回报就会呈数量级增加。而杠杆效应进一步放大了经济回报的差异。在杠杆时代，在自己的领域做到极致非常重要。&lt;/p>
&lt;h2 id="分清主次聚焦重点">分清主次，聚焦重点
&lt;/h2>&lt;p>&lt;strong>给自己的时间设定价格，用时薪计算时间价值。如果用花钱的方式节省的时间价值更高，那就花钱，不要犹豫。要想真的赚到钱，先要相信你自己很值钱。&lt;/strong>&lt;/p>
&lt;p>要从时间成本的角度做决策，如果做某件事外包的成本低于时薪，那就外包；如果不做的损失低于时薪，那就不做；如果花钱请人的成本低于时薪，那就花钱请人。甚至做饭也是同样的道理，你可能想吃健康的家常菜，但是如果可以外包，那就外包吧。&lt;/p>
&lt;p>&lt;strong>在商业世界里，大多数人在玩零和游戏，少数人在玩正和游戏，他们在人群中寻找志同道合者。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这世上的游戏不外乎两种。第一种是金钱游戏。金钱不能解决所有问题，但可以解决所有和金钱有关的问题。大家都明白这一点，所以每个人都想赚钱。但与此同时，许多人内心深处觉得自己是赚不到钱的，所以，他们不喜欢看到创造财富的故事。他们会攻击整个商业体系，宣称「赚钱是邪恶的，不应该赚钱」。但其实他们在玩第二种游戏，这种游戏叫地位游戏。他们之所以说「我不需要钱，我不想要钱」，是因为他们想占领高地，让别人高看一眼。地位就是一个人在社会等级中的位置。&lt;/strong>&lt;/p>
&lt;p>在人类进化史上，财富创造是近代才出现的活动，是一个正和游戏。而地位之争自古有之，是一个零和游戏。那些攻击财富创造的人往往只是为了追求地位。&lt;/p>
&lt;p>玩愚蠢的游戏，就只能赢得愚蠢的奖品。&lt;/p>
&lt;p>&lt;strong>最重要的是，要在重大决定上花更多时间。人生早期有三个重大决定：在哪里生活，和谁在一起，从事什么职业。&lt;/strong>&lt;/p>
&lt;p>找到自己擅长的领域，然后用自己的技能去帮助他人：提供免费的产品或服务，主动向世界传递善意。好人终有好报。只要始终如一，假以时日，付出就一定能获得相应的回报。但不要计较自己付出了多少——一旦开始计较，耐心就会被消耗殆尽。&lt;/p>
&lt;h2 id="找到如玩耍般的工作">找到如玩耍般的工作
&lt;/h2>&lt;p>在人类社会形成之初，每个人都扮演着狩猎者或采集者的角色，自己劳动养活自己。农业社会伊始，社会等级开始形成。工业革命和工厂的出现极大地强化了社会的等级划分，因为没有人可以凭一己之力拥有或建立一家工厂。&lt;strong>但由于互联网的诞生和发展，现代社会越来越回归到每个人为自己劳动的时代。&lt;/strong>&lt;/p>
&lt;p>退休就是不再为了想象中的明天而牺牲今天。当你能活在当下，内心充盈地度过每一天时，你就达到了退休的状态。&lt;/p>
&lt;p>第一种方法是存钱。只要存款够多，被动收入（不用动一根手指）就能满足开销。第二种方法是把开销降为零——出家修行。第三种方法是做自己热爱的事情，完全乐在其中，有钱没钱无所谓。所以，实现退休状态有很多种方法。&lt;/p>
&lt;p>避开竞争陷阱的方法就是做独一无二的自己，找到自己能做到独步天下的事情。做到最好，只因热爱。如果你真的热爱一个事物，那就追随本心，努力找到利用它满足社会真实需求的切入点，利用杠杆效应扩大规模，以个人名义担起责任。这样，在承担风险的同时，你也将获得相应的回报，拥有自己所提供产品或服务的所有权或股权，然后持续精进。&lt;/p>
&lt;p>毫无保留地爱，随心所欲地创造，无忧无虑地玩耍。&lt;/p>
&lt;p>我永远都在「工作」。但是，别人眼里的工作于我而言就像是玩耍。正因如此，我才确信没有人可以在我的领域与我匹敌。因为我觉得工作就是玩耍，所以我可以一天玩 16 个小时。如果有人想跟我竞争，那么他们肯定会输，因为他们不可能一周工作 7 天，每天工作 16 个小时。&lt;/p>
&lt;p>钱不是万恶之源。钱本身是无罪的，真正有害的是对钱的贪欲。从道德层面看，追求金钱并不是坏事，它跟人品没什么关系，但是，贪欲对人是有害的。&lt;/p>
&lt;p>人之所以永远不会感到满足，是因为欲望这个开关一旦被打开，就不会在某个具体数字面前自动关停，正所谓欲壑难填。所以，不要以为赚到某个数额的钱，人自然就会满足了、停手了。&lt;/p>
&lt;p>赚钱的目的是解决财务问题，满足物质需求。&lt;strong>我认为，摆脱金钱贪念最好的办法就是，赚了钱之后不要升级自己的生活方式。赚到钱的人往往会自然而然地提高生活水准。假设你一次性赚到一大笔钱，而不是靠日积月累。此时你依然保持着原有的生活方式，还没来得及升级，你的金钱就会远远超出你的实际需求和欲望，这反而让你达到一种财务自由的状态。&lt;/strong>&lt;/p>
&lt;p>我把自由看得高于一切。我说的自由是多种多样的：想做什么就做什么的自由，不想做什么就不去做的自由，不受自我情绪或外界影响的自由，等等。自由是我最珍视的价值。&lt;/p>
&lt;p>硅谷最成功的人分为两类。第一类是做风险投资的人，因为他们非常多元化，控制着曾经是稀缺资源的东西。第二类是极为擅长识别公司发展阶段和前景的人。这些人会精准地找到下一个多宝箱或爱彼迎，在公司的产品和服务刚刚与市场需求相衔接时加入它们。这些人拥有公司扩大规模急需的背景和专业知识，也能找到合适的引荐人。&lt;/p>
&lt;h2 id="如何获得运气">如何获得运气
&lt;/h2>&lt;p>在获得财富的过程中，你要排除「运气」这个不可控因素。&lt;/p>
&lt;p>第一种运气是不期而遇的运气，一个人的好运完全源于他控制范围之外、意料之外的事情，比如获得意外之财、遇到贵人等等。&lt;/p>
&lt;p>第二种运气源于坚持不懈、孜孜不倦、屡败屡战、不断尝试，是靠个人主动创造机会获得的。你释放了大量能量，使出浑身解数，移山倒海，一往无前。就好像在做科学实验，把不同的试剂混合在一起，看看能产生什么结果。因为你不懈地努力，不停地奋进，不断地释放能量、积蓄力量，所以好运找到了你。&lt;/p>
&lt;p>第三种获得好运的方式就是善于发现好运。如果你在某个领域技艺娴熟、经验丰富，那么当这个领域实现了意外突破时，你就会在第一时间洞悉，这时，其他不熟悉这个领域的人会无动于衷。这就是增加对好运的敏感性，幸运会眷顾有准备的大脑。&lt;/p>
&lt;p>第四种运气是最奇妙、最难得的一种，那就是打造独特的个性、独特的品牌、独特的心态，让运气找到你。&lt;/p>
&lt;p>获得好运的方法：希望好运不期而至。·不停地折腾，直到撞上大运。·做好心理准备，对别人错过的机会保持敏感。·把你所做的事情做到极致。精益求精，直到名副其实。让机会自动找到你，让运气成为必然。&lt;/p>
&lt;p>第四种运气总结一下就是，以某种方式塑造自己的性格，之后就由性格决定命运。&lt;/p>
&lt;p>&lt;strong>「在一个长线游戏中，似乎每个人都在让彼此变得富有。而在一个短线游戏中，似乎每个人都在让自己变得富有。」&lt;/strong>&lt;/p>
&lt;h2 id="保持耐心">保持耐心
&lt;/h2>&lt;p>江山易改，本性难移。所谓「性格决定命运」，就是一个人不断重复自己的行为模式，好的坏的、优点缺点，最终会得到与自己的行为相对应的结果。始终主动付出、不断奉献，不要斤斤计较、患得患失。&lt;/p>
&lt;p>在物质世界里，金钱不能给人带来快乐，不能解决人的健康问题，不能让所有家庭变得美满和睦，不能让人免受情绪波动的困扰。但金钱可以买到自由，可以解决许多外在的问题。所以，赚钱是一个合情合理的奋斗目标。&lt;/p>
&lt;h2 id="判断力">判断力
&lt;/h2>&lt;p>把时间花在省钱上是不会致富的。省出时间来赚钱才是正确的思路。&lt;/p>
&lt;p>我对智慧的定义是**「知道个人行为的长期后果」**，用于解决外部问题的智慧其实就是判断力。或者说，智慧和判断力是高度关联的：一个智慧而富有判断力的人，首先要知道个人行为的长期后果，然后做出正确的决策并付诸行动。&lt;/p>
&lt;p>在杠杆时代，一个正确的决策可以帮你赢得一切。不付出努力，就无法培养判断力，也不会获得任何杠杆。&lt;/p>
&lt;p>在前进的过程中，方向比速度更重要，特别是运用了杠杆以后。在每个岔路口选对方向，其重要程度要远远超过前进的努力程度。&lt;/p>
&lt;h2 id="如何清晰地思考">如何清晰地思考？
&lt;/h2>&lt;p>真正的知识具有内在的关联性，就像一根链条，从基础层面到应用层面环环相扣。&lt;/p>
&lt;p>如果在需要用到一些概念时却无法通过基础知识推导出来，你就会迷失在现有知识的迷宫中，你就成了简单的背诵机器。&lt;/p>
&lt;p>阻碍我们看清现实的最大因素就是我们对现实「应有的样子」有先入为主的印象。&lt;/p>
&lt;p>痛苦时刻的一个定义是：当你看到事物的真面目不是你本来想要的样子时，你是痛苦的。&lt;/p>
&lt;p>难点在于看清真相。要看清真相，就必须摆脱自我，因为自我不想面对真相。自我越弱小，对自己反应的限制越少，对自己想要的结果的执念越低，就越容易看清现实。&lt;/p>
&lt;p>悠闲的大脑才能产生伟大的创意。一个倍感压力、案牍劳形、四处奔波、焦头烂额的人，是没有办法思考的。所以，一定要为思考挤出时间。&lt;/p>
&lt;h2 id="摆脱自我束缚认清世界真相">摆脱自我束缚，认清世界真相
&lt;/h2>&lt;p>要持续成长，很重要的一点是学会打破现有的条件反射，改掉不良习惯。&lt;/p>
&lt;p>要善于剖析自我，梳理每个习惯是怎样形成的。&lt;/p>
&lt;h2 id="学习决策技巧">学习决策技巧
&lt;/h2>&lt;p>要选择从长期来看让我们受益最大的做法，而不是只顾眼前得失。&lt;/p>
&lt;p>当把成功归于自己时，你要更加谨慎，因为难免出现认知偏差。&lt;/p>
&lt;p>自由的表现之一就是可以心口如一，表达自己的真实想法。诚实和自由高度统一，相辅相成。&lt;/p>
&lt;p>具体地表扬，泛泛地批评。&lt;/p>
&lt;p>如果要提出批评意见，不要批评某个人，可以批评工作方法，或者批评某一类行为。如果要表扬，那就找到一个榜样，表扬这个特定的人。这样有助于维护你身边人的自尊心和身份感，获得他们的支持，让他们为你所用，而不是与你作对。&lt;/p>
&lt;p>人们好像很难从本质上理解决策的杠杆效应。我可以举例说明，如果我管理着 10 亿美元的资产，而且我的决策正确率比其他人高出 10%，我就能通过一个判断、一个决策创造出 1 亿美元的价值。这就是决策的杠杆效应。随着现代科技的发展、劳动力规模的扩大和资本的不断积累，决策也将发挥越来越大的杠杆效应。&lt;/p>
&lt;p>越觉得自己无所不知，规避和处置风险的方法越少。&lt;/p>
&lt;h2 id="发现好的心智模型">发现好的心智模型
&lt;/h2>&lt;p>所谓的心智模型，其实就是有助于调取你所学知识的简单方法。&lt;/p>
&lt;p>有一种理论认为，文明的存在是为了解决交配权的分配问题。从纯粹的性选择角度看，人类社会精子充足，卵子稀少，所以存在分配问题。究其根本，人类的所有发明和成就都是为了解决交配权的分配问题。人生的很多问题都可以从进化论、热力学、信息论和复杂性理论中找到解释和预测。&lt;/p>
&lt;p>成功的关键并不在于做出正确判断，而在于避免做出错误判断。&lt;/p>
&lt;p>如果不能深刻理解供求关系、劳资关系、博弈论等问题，你就不可能在商业上取得成功，甚至也无法很好地适应现代社会。&lt;/p>
&lt;p>委托和代理问题非常容易理解。恺撒大帝有句名言：「如果你想完成一件事，那就亲自去做。如果不想完成，那就派人去做。」他的意思是，如果想把事情做好，你就必须自己去做。如果你是委托人，你就会有主人翁的责任感，因为在意结果，所以你会做得很好。而如果你是代理人，你就是在为别人做事，你可能会做得很糟糕，因为你不在乎。你追求的是自身利益最大化，而不是委托人资产最优化。&lt;/p>
&lt;p>公司规模越小，每个人越会觉得自己是委托人、是主人。越不觉得自己是代理人，工作就会做得越出色。增加所获报酬与创造价值之间的相关性，可以改变员工的认知，让他们越发觉得自己是委托人，而不仅仅是代理人。&lt;/p>
&lt;p>&lt;strong>要吃透基础数学，真正掌握加减乘除、复利计算、概率论和统计学。&lt;/strong>&lt;/p>
&lt;p>对那些声称「科学」站在自己一边的人来说，最重要的原则，同时也是他们理解得最不透彻的原则，就是可证伪性。如果不能做出可证伪的预测，那就不是科学。要让人们相信某个理论是真理，这个理论就应该具有预测能力，而且必须是可证伪的。&lt;/p>
&lt;p>如果你难以抉择，答案就是否定的。原因是，现代社会充满了选择，有成千上万个选择。我们生活在一个有 70 亿人口的星球上，我们和互联网上的每个人都相互连接，世界上有成千上万的职业供我们选择。大千世界，芸芸众生，选择永远不缺。&lt;/p>
&lt;p>一个重大决策可能会影响未来十几年，甚至几十年的人生轨迹。创业可能需要 10 年时间。一段恋情可能会持续 5 年甚至更久。搬到一个城市可能会住上 10 年、20 年。这些决定都将产生深远的影响。人做不到绝对确定，但是我们一定要在非常确定的情况下再做出决定。&lt;/p>
&lt;p>&lt;strong>一条简单的人生经验：如果在一个艰难的决定上意见不统一，你就应该选择短期内更痛苦的道路。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>如果面对两个选择，利弊各占 50%，你就应该选择短期内更艰难、更痛苦的道路。&lt;/strong>&lt;/p>
&lt;p>从本质上看，两条道路中的一条会带来短期痛苦，而另一条会在未来引发更长久的痛苦。为了回避矛盾，大脑会本能地选择摆脱短期痛苦。&lt;/p>
&lt;p>前提条件是，两个选择利弊相当，但如果一条道路会带来短期痛苦，那么它也会带来长期收益。而根据复利效应，长期收益才是你想要的。&lt;/p>
&lt;h2 id="学会热爱阅读">学会热爱阅读
&lt;/h2>&lt;p>不要比谁读书更快。书越好，你越要慢慢阅读、慢慢吸收。&lt;/p>
&lt;p>大部分图书都有一个论点（我讲的是非虚构类作品，不是小说），作者提出一个论点，引用海量实例证明自己的观点，然后用自己的观点去论证世界上各种各样的现象。一旦觉得自己已经明白了这个论点，我就不再读下去了。这样的书太多了，我称其为伪科学畅销书。别人会问我：「这本书你读了吗？」我总是说读过了，其实我可能只读了两章，但书的主旨我已经了解了。&lt;/p>
&lt;p>阅读数学、科学和哲学领域的经典作品。不要读畅销书，不要看新闻。避免加入任何所谓的「读书俱乐部」，避免追求任何的社群认同。把真理置于社群认同之上。&lt;/p>
&lt;p>&lt;strong>在解决问题时，问题越古老，解决方案存在的时间越长。&lt;/strong>&lt;/p>
&lt;p>任何流传了两千年的图书都经过了许多代人的甄别和筛选，其中的一般性原则更有可能是正确的。我想重新开始阅读这类书。&lt;/p>
&lt;h2 id="幸福是一种技能">幸福是一种技能
&lt;/h2>&lt;p>有钱确实能提高幸福感，但金钱其实只发挥了很小的作用。幸福感的提升主要是因为，随着时间的推移，我逐渐认识到，让自己幸福对我来说是最重要的事，我也运用了大量技巧来培养自己的幸福感。&lt;/p>
&lt;p>现在，我认为幸福就是一种不需要主动作为的状态。当把「缺憾感」从生活中剔除时，幸福感就会油然而生。&lt;/p>
&lt;p>当感到生命中并不缺少什么时，大脑就会处于休眠状态，不再追忆昨天，也不再畅想明天，不会悔不当初，也不会谋求未来。&lt;/p>
&lt;p>人们往往误将积极乐观的想法和行为等同于幸福。&lt;/p>
&lt;p>幸福就是消除缺憾感之后的感受。&lt;/p>
&lt;p>真正的幸福只是内心平和的副产品，主要还是源于接受现实，而不是改变外部环境。&lt;/p>
&lt;p>理性很强的人可以通过训练自己的无感反应获得平和，即学会漠视自己无法控制的事物。&lt;/p>
&lt;h2 id="幸福是一种选择">幸福是一种选择
&lt;/h2>&lt;p>我们无条件地听从自己脑海中的声音，以为这个声音就是一切真理的来源。殊不知，大脑也是可塑的，每一天都是崭新的。记忆和身份只是来自过去的负担，让我们无法自由自在、心无旁骛地活在当下。&lt;/p>
&lt;h2 id="幸福需要心境平和">幸福需要心境平和
&lt;/h2>&lt;p>你要意识到，是焦虑感让你感到不快乐。而这种焦虑感源于一连串不断涌现的想法。&lt;/p>
&lt;h2 id="欲望是主动选择的不开心">欲望是主动选择的不开心
&lt;/h2>&lt;p>从根本层面上看，从自身以外的事物中寻求幸福，本身就是缘木求鱼。当然，我并不是说物质世界不重要。作为一种社会性动物，人需要去履行一些社会职责。人的一生就是在力所能及的范围内减少无序状态，即所谓**「局部熵减」**，这是你的人生责任。&lt;/p>
&lt;p>欲望就是你跟自己的约定，约定的内容是：不得到我想要的东西，我是不会快乐的。我觉得大部分人都没有意识到，这就是欲望的本质。我们每天都生活在欲望中，又奇怪为什么自己不快乐。我已然认识到，欲望是我痛苦的来源。&lt;/p>
&lt;h2 id="成功不一定带来幸福">成功不一定带来幸福
&lt;/h2>&lt;p>幸福就是满足现状。而成功源于对现状的不满，是对现状的改造。两者只能选一个。&lt;/p>
&lt;p>生存和繁衍的本能驱使人们劳作，而享乐适应让我们步履不停。幸福的秘诀在于，知道何时停下劳作的脚步，开始随心去玩耍。&lt;/p>
&lt;p>对现在的我来说，真正的赢家是那些已经完全退出游戏的人，甚至根本不玩游戏的人，是那些已经超越了游戏的人。这些人的内心无比强大，有极强的自控力和清醒的自我意识，他们不需要从任何人那里获得任何东西。&lt;/p>
&lt;p>在现实生活中，内心的平和状态不是一劳永逸的，也不会是一成不变的。心理状态总在不断变化。在大多数情况下，接受并顺应现实，是获得幸福的核心技能。&lt;/p>
&lt;p>平和是静态的幸福，幸福是动态的平和。只要愿意，你就随时可以把平和激活，使之变成幸福。但是大部分时间你想要的其实是被封印的幸福，即平和。如果你是一个内心平和的人，那么无论做什么事你都可以获得幸福的体验。&lt;/p>
&lt;p>获得内心平静的唯一方法是摒弃「问题」这个概念。&lt;/p>
&lt;h2 id="嫉妒是幸福的敌人">嫉妒是幸福的敌人
&lt;/h2>&lt;p>我在生活中努力摆脱「应该」这个词。当「应该」在脑海中出现时，其背后隐藏的是负罪感或社会规训。如果做一件事是因为「应该」，那就表示你内心是不想这么做的，而违背自己的心意会让你变得痛苦不堪。因此，我努力在生活中减少「应该」做的事。&lt;/p>
&lt;p>而现实是，生活就是一场单人游戏。人独自出生，独自死亡，独自解读人世间的一切。你的记忆只属于你一个人。你出生前无人在意，你离开人世后也无人在意，你存在于人世间只是短短几十年，人生就是一场单人游戏。&lt;/p>
&lt;p>嫉妒是一种有害的情绪，因为归根到底，它并不能改善你的生活，只会让你不快乐，而你嫉妒的那个人仍然是成功的、美丽的，仍然拥有你所嫉妒的一切。&lt;/p>
&lt;h2 id="幸福源于好习惯">幸福源于好习惯
&lt;/h2>&lt;p>获取平和与幸福其实是一种技能，这种技能不是与生俱来的。&lt;/p>
&lt;p>工作时，和比自己更成功的人在一起。玩耍时，和比自己更快乐的人在一起。&lt;/p>
&lt;p>可以通过养成好习惯来获取。不喝酒、不吃糖可以提高情绪的稳定性，远离社交媒体（脸书，Snapchat 和推特）也可以提高情绪的稳定性。玩电子游戏会带来短暂的快乐（我一度痴迷于游戏），但会摧毁长期的幸福。喝咖啡也属于用长期健康换取短期兴奋。这些不受你控制的外界因素会刺激你体内多巴胺的分泌，刺激因素一旦消失，多巴胺水平就会下降。&lt;/p>
&lt;p>从本质上讲，生活的过程就是用精心培养的好习惯替换那些在不经意间养成的坏习惯，努力成为一个更幸福的人。你的幸福指数最终取决于你的习惯和你花最多时间与之相处的人。&lt;/p>
&lt;p>最幸福和最乐观的人会选择五只正确的黑猩猩做朋友。&lt;/p>
&lt;p>如果我意识到自己正在对别人评头论足，我就会停下来自问：「我能不能正面解读这件事？」我过去常常因为一些事情感到恼火，但现在总会尝试看到积极的一面。刚开始，我可能需要花几秒钟，动用理性分析才能想出一种积极的解读方式。&lt;/p>
&lt;p>新闻的目的就是让人感到焦虑和愤怒。但新闻背后的科学、经济学、教育和冲突趋势是有积极意义的。&lt;/p>
&lt;p>政治、学术和社会地位都是零和游戏。正和游戏才能造就积极向上的人。&lt;/p>
&lt;p>阳光、运动、正向思考和色氨酸，这些不是药物，但都可以增加大脑中的血清素，使人始终保持健康、清醒、积极、乐观。&lt;/p>
&lt;p>这就是改变习惯的步骤：首先，知道自己要做什么；其次，知道该怎么做；再次，把规划告诉朋友，让一致性偏见发挥作用；最后，严格自律，知行合一，进行自我重塑，直至蜕变成全新的自己。&lt;/p>
&lt;h2 id="于接受中寻找幸福">于接受中寻找幸福
&lt;/h2>&lt;p>试图改变现状是一种欲望。在成功改变现状之前，欲望会让人感到痛苦。所以不要总想着去改变外部环境。在任何特定的时间段，只选择一个最有价值的欲望，作为自己的奋斗目标和动力之源。&lt;/p>
&lt;p>无论面对何种状况，你都有三种选择：改变现状，接受现状，逃避现状。很多人在遇到问题时会踟蹰不前，陷入空想：希望改变现状却没有横下一条心去改变，希望转身离开却没有毅然决然地离去，同时又不能心平气和地接受现状。&lt;/p>
&lt;p>这种纠结和回避的态度正是人生中大部分痛苦的来源。我在脑海里对自己说得最多的就是两个字：接受。&lt;/p>
&lt;p>所谓接受，就是无论结果如何，都可以泰然处之；就是保持心态平衡，大脑专注；就是退一步海阔天空；就是观大势，顾全局，谋长远。&lt;/p>
&lt;p>一个方法是退后一步，回顾经历过的痛苦。我还会把这些痛苦写下来：上次分手，上次生意失败，上次健康出问题，后来都发生了什么？这样我就可以看到在随后的几年里我的成长和进步。&lt;/p>
&lt;p>另一个应对小挫折的方法就是换个角度看问题。当我遭遇挫折时，部分自我会立即做出消极反应。但现在我已经学会自问：「这种情况有什么积极的意义吗？」&lt;/p>
&lt;p>如何学会接受无法改变的事情？从根本上说，就是学会坦然面对死亡。&lt;/p>
&lt;p>死亡是人的一生中最重大的事情。人终有一死，选择正视、承认死亡而不是逃避死亡，将赋予人生巨大的意义。我们在一生中会花费大量时间试图逃避死亡。我们的很多奋斗目标都可以归结为对永生的追求。&lt;/p>
&lt;p>相对于宇宙，你就像一只在夜空中闪烁的萤火虫，你的生命转瞬即逝。如果能彻底认识到你所做的一切不过是徒劳，你就能获得巨大的幸福感和平和感，因为你会意识到，生命不过是一场游戏。但生命是一场有趣的游戏。在这场游戏中，唯一重要的事情就是，随着生命的展开，你要不断地体验现实。&lt;/p>
&lt;p>既然如此，你为什么不以最积极的方式去诠释自己经历的一切呢？&lt;/p>
&lt;p>宇宙的幸福值并不是恒定的，别人不会因为你不幸福而变得更加幸福。&lt;/p>
&lt;p>你在地球上所拥有的时间稍纵即逝，无比宝贵，你一定要好好珍惜。你要把直面和正视死亡放在第一位。人的一生，不否认、不回避死亡是极其重要的，因为这是你学会坦然接受无法改变的事情、活在当下的本原。&lt;/p>
&lt;h2 id="选择做自己">选择做自己
&lt;/h2>&lt;p>你唯一应该做的事，是你自己想做的事。别人总希望你以特定的方式做事，但如果不再费心去揣摩别人的期待，你就能听到自己脑海中那个微弱的声音。那个声音代表了你真实的想法。倾听它，你就可以做自己了。&lt;/p>
&lt;p>在「做自己」这件事情上，没有人能与你竞争。你永远不会像我一样擅长做我自己，我也永远不会像你一样擅长做你自己。当然，做人要虚心聆听，博采众长，但不要盲目模仿。模仿他人纯属徒劳。&lt;/p>
&lt;p>相反，每个人都有独一无二的资质技能、专业知识、能力才干、个人欲望，这些是世界上其他人所没有的，是先天基因和后天经验共同作用的结果。&lt;/p>
&lt;p>不要基于别人正在做的事为你自己列清单、做决策。你永远不会成为他们，你永远都不擅长做另一个人。&lt;/p>
&lt;h2 id="选择关爱自己">选择关爱自己
&lt;/h2>&lt;p>情绪上的大起大落让我们无比焦虑。生物进化的目标本来是适应物质的匮乏。为了应对匮乏，基因决定了我们看到糖分、酒精、毒品就难以抗拒，遇到亲密关系也无法拒绝。&lt;/p>
&lt;p>但是，现代人生活在一个富足的世界里，面对琳琅满目、应有尽有的一切，当我们的基因一直在说「要要要」的时候，我们本该拒绝，但我们的身体已经不知道如何说不了。&lt;/p>
&lt;p>所以，在现代社会，我们逐渐背离了符合自然规律的生活习性，形成了病态的生活方式。&lt;/p>
&lt;p>人的大脑和身体存在备用机制，大自然的这种设计是有意义的。例如，在冰期，人类在没有很多植物可供食用的环境中进化。&lt;/p>
&lt;p>后来，在备用机制的作用下，人们选择多种植物作为自己的食物。到现在，人类食用植物已有几千年的历史。我虽然并不认为植物对身体有害，但我感觉接近原始的饮食结构应该更好&lt;/p>
&lt;p>让人产生饥饿感的食物是糖。糖会给你的身体发出这样的信号：「在我们进化的环境中竟然有这么好的食物资源。」于是你会迫不及待地摄取糖分。问题在于，糖效应凌驾于脂肪效应之上。&lt;/p>
&lt;p>在高脂高糖的饮食中，糖会让人产生饥饿感，脂肪会提供卡路里，从而导致暴饮暴食。这也是为什么所有的甜点都含有大量的脂肪和碳水化合物。&lt;/p>
&lt;p>糖和脂肪的结合是致命的，在饮食中我们必须注意避免摄入此类食物。&lt;/p>
&lt;p>膳食中的脂肪会带来饱腹感，糖会导致饥饿感。但糖效应占据主导地位，所以我们需要相应地控制自己的食欲。&lt;/p>
&lt;p>最常见的借口就是「我没时间」。表面上说的是「我没时间」，但其实说的是，「这对我来说不是优先事项」。&lt;/p>
&lt;p>生活中的所有事情都一样，如果愿意做出短期的牺牲，你就会得到长期的好处。我的体能教练耶日·格雷戈雷克是个非常聪明的人。他总是说：「选择简单模式，人生会越来越困难；选择困难模式，人生会越来越简单。」&lt;/p>
&lt;h2 id="冥想精神力量">冥想+精神力量
&lt;/h2>&lt;p>情绪是生物进化的产物，能预测当前事件对未来的影响。在现代社会环境中，情绪反应通常是夸张的，甚至是错误的。&lt;/p>
&lt;p>我发现，对我最有效的一种冥想叫「无选择觉知」，或叫「无评判觉知」。这种冥想方式就是在处理日常事务时（最好有跟大自然接触的机会），不跟任何人交谈，练习接受自己所处的当下时刻，不做任何评判。既不去想，「那边有个流浪汉，我最好到马路对面去」，也不要看着跑步的人暗想，「这人身材走样了，我的身材比他好」。&lt;/p>
&lt;p>第二种方法是超觉冥想，就是通过反复唱诵，在头脑中制造一种白噪声来掩盖自己的想法。第三种方法就是对自己的想法保持高度敏锐和警觉。通过观察自己的想法，你会意识到很多想法都源于恐惧。&lt;/p>
&lt;p>在你识别出恐惧的那一刻，恐惧感自然就消失了。一段时间过后，你的思绪就会平静下来。&lt;/p>
&lt;p>我学到的第四种冥想方法是，坐在那里闭上眼睛，每天至少一个小时。此时，你以臣服的姿态接受发生的一切，不争取，不对抗。如果有想法在头脑中涌现，那就任其涌现。&lt;/p>
&lt;p>洞察冥想是在「调试模式」下运行大脑，最终你会意识到自己只是一个大程序的子程序。&lt;/p>
&lt;h2 id="选择自我塑造">选择自我塑造
&lt;/h2>&lt;p>说「打算」，就是在拖延，就是在给自己找借口。不过，即使没有把想法付诸行动，至少也要对自己真实的心理活动保持觉知：「虽然我说我想做这件事，但其实并不是真的想。因为如果真的想，我早就去做了。」&lt;/p>
&lt;p>有想法就直接采取行动，就是这么简单。&lt;/p>
&lt;h2 id="选择自我成长">选择自我成长
&lt;/h2>&lt;p>「要建立系统，而不是设定目标。」运用你的判断力确定什么样的环境有助于你茁壮成长，然后在周围创造一个这样的环境，由此增加成功的概率。&lt;/p>
&lt;p>第一条原则是阅读，广泛地阅读。阅读面要广，不要局限于社会认可的书，更不要局限于我推荐的书。要为了阅读而阅读，培养对阅读的热爱。&lt;/p>
&lt;p>第二条原则是，掌握与阅读技巧相关的数学和说服技能。这两种技能有助于你在现实世界里活得游刃有余、畅行无阻。&lt;/p>
&lt;h2 id="选择解放自己">选择解放自己
&lt;/h2>&lt;p>勇气不是在枪林弹雨中冲锋陷阵，而是不在乎别人怎么想。&lt;/p>
&lt;p>不要花自己的时间去取悦别人。别人快不快乐是他们的问题，不是你的问题。你快乐了，别人也会快乐。你快乐了，别人会问你是如何快乐起来的，他们会从中学到点儿什么，但是你没有责任让别人快乐。&lt;/p>
&lt;p>观察自己愤怒时的样子。愤怒就是对情况失去控制时的表现。愤怒是跟自己的契约，你同意让自己陷入身体、精神和情感的混乱，直到现实发生改变。&lt;/p>
&lt;p>愤怒本身就是一种惩罚。一个愤怒的人试图把你的头摁到水下，但同时他也在溺水。&lt;/p>
&lt;p>自我意识和自我发现没有终点，是毕生的功课，我们在这条路上不断精进。人生没有一个有意义的答案，也没有人可以完全解决人生的所有问题，除非你成为一个大彻大悟的人。也许有人能最终做到，但我知道我不太可能做到，因为我已经被卷入这场无休止的「老鼠竞赛」。在最好的情况下，我能做到偶尔抬头看看天上的云。&lt;/p>
&lt;p>孤独的个体召唤出非人的意志力，进行断食、冥想、锻炼……对抗大批科学家和统计学家以充足的食物、药物和电子屏幕为武器制造出的垃圾食品、标题党新闻、无限的色情内容、无穷无尽的游戏、令人上瘾的毒品。&lt;/p>
&lt;h2 id="生命的意义">生命的意义
&lt;/h2>&lt;p>你做的任何事情都将烟消云散，你存在的一切痕迹都将无处可寻。人类终将灭亡，地球也会荡然无存。即使是移民火星的群体也会消失。无论你是艺术家、诗人、征服者、贫民，还是其他任何人，几代人过后，都不会有人记得你。总之，生命没有任何意义。&lt;/p>
&lt;p>作为生命系统，我们所做的一切都是在推动宇宙加速达到热寂。创作艺术、研究数学、组建家庭、发明计算机、创建文明等等——所有这些更复杂的系统都在使宇宙加速达到热寂。你正在把我们推向「万物一体」的终极境界。&lt;/p>
&lt;h2 id="按照自己的价值观生活">按照自己的价值观生活
&lt;/h2>&lt;p>在对别人撒谎之前，你必须先对自己撒谎。&lt;/p>
&lt;h2 id="我们唯一拥有的是当下">我们唯一拥有的是当下
&lt;/h2>&lt;p>除了当下，一切都是不存在的。没有人能够回到过去，也没有人能够以任何有意义的方式成功地预测未来。唯一存在的就是此时此地，就是你恰好存在的这个时刻和在宇宙空间里的这个位置。&lt;/p>
&lt;p>&lt;strong>灵感本易逝，行动应当时。&lt;/strong>&lt;/p>
&lt;h2 id="图书">图书
&lt;/h2>&lt;p>《无穷的开始：世界进步的本源》&lt;/p>
&lt;p>《理性乐观派：一部人类经济进步史》&lt;/p>
&lt;p>《基因组：生命之书 23 章》&lt;/p>
&lt;p>《红色皇后：性与人性的进化》&lt;/p>
&lt;p>《自下而上：万物进化简史》&lt;/p>
&lt;p>《万物解释者：复杂事物的极简说明书》&lt;/p>
&lt;p>《趣味物理寻答集》&lt;/p>
&lt;p>《主权个体：把握向信息时代的过渡》&lt;/p>
&lt;p>《现实不似你所见：量子引力之旅》&lt;/p>
&lt;p>《七堂极简物理课》&lt;/p>
&lt;p>《竞争策略：策略博弈论入门》&lt;/p>
&lt;p>《万物理论（启蒙的视角）》&lt;/p>
&lt;p>《杰德·麦肯纳笔记本》&lt;/p>
&lt;p>《杰德演讲#1》&lt;/p>
&lt;p>《杰德演讲#2》&lt;/p>
&lt;p>《全然的自由：克里希那穆提要义》&lt;/p>
&lt;p>《塞涅卡之道：斯多葛派大师的实用书信》&lt;/p>
&lt;p>《改变你的心智》&lt;/p>
&lt;h2 id="纳瓦尔的写作">纳瓦尔的写作
&lt;/h2>&lt;p>纳瓦尔的写作生命公式一（2008 年）这些是我写给自己的笔记。如果参照系不同，计算方法就会有所不同。这些不是定义，而是成功的算法。欢迎读者提供自己的见解。&lt;/p>
&lt;p>幸福 = 健康 + 财富 + 良好的人际关系&lt;/p>
&lt;p>健康 = 锻炼 + 饮食 + 睡眠&lt;/p>
&lt;p>锻炼 = 高强度耐力训练 + 体育运动 + 休息&lt;/p>
&lt;p>饮食 = 天然食物 + 间歇性禁食 + 植物&lt;/p>
&lt;p>睡眠 = 不要闹钟 + 8 ～ 9 小时 + 昼夜节律&lt;/p></description></item><item><title>《Software Engineering at Google》 摘要 02：如何融入团队？</title><link>https://andornot.xyz/posts/software-engineering-at-google-note-02/</link><pubDate>Mon, 19 Sep 2022 21:47:10 +0800</pubDate><guid>https://andornot.xyz/posts/software-engineering-at-google-note-02/</guid><description>&lt;img src="https://andornot.xyz/software-engineering-at-google-note-02-cover.png" alt="Featured image of post 《Software Engineering at Google》 摘要 02：如何融入团队？" />&lt;p>&lt;strong>该文章为笔者读 &lt;a class="link" href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Chapter-2_How_to_Work_Well_on_Teams/Chapter-2_How_to_Work_Well_on_Teams" target="_blank" rel="noopener"
>Software Engineering at Google&lt;/a> 时所记摘要，录以备考假以时日待作感悟。&lt;/strong>&lt;/p>
&lt;p>软件开发是团队的努力。要在工程团队或任何其他创造性合作中取得成功，你需要围绕谦逊、尊重和信任的核心原则重新定义你的行为。&lt;/p>
&lt;p>人们害怕别人看到和评价他们正在进行的工作。从某种意义上说，缺乏安全感是人性的一部分——没有人喜欢被批评，尤其是那些没有完成的事情。认识到这个主题让我们看到了软件开发中一个更普遍的趋势：缺乏安全实际上是一个更大问题的征兆。&lt;/p>
&lt;p>在内心深处，许多工程师暗中希望被视为天才。这种幻想是这样的：你会被一个了不起的新概念所震撼。你消失数周或数月躲在洞穴中，努力实现你的理想。然后世界上「发布」你的软件，用你的天才震撼每个人。你的同龄人对你的聪明感到惊讶。人们排队使用你的软件。名利自然随之而来。&lt;/p>
&lt;p>人类有寻找领导者和榜样的本能，崇拜他们，并试图模仿他们。我们都需要英雄来激发灵感，编程世界也有自己的英雄。「科技名人」已经几乎被神化，我们都想写一些改变世界的东西，比如 Linux 或者设计下一种优秀的编程语言。&lt;/p>
&lt;p>事实证明，这种天才神话只是我们缺乏安全感的另一种表现。许多程序员害怕分享他们刚刚开始的工作，因为这意味着同行会看到他们的错误，知道代码的作者不是天才。&lt;/p>
&lt;p>如果你把所有的时间都花在独自工作上，增加了不必要失败的风险，耽误了你的成长潜力。尽管软件开发是一项需要高度集中精力和独处时间的深度智力工作，但你必须权衡协作和审查的价值（以及需求！）。&lt;/p>
&lt;p>如果你对世界隐瞒你的牛逼想法，并在未完美之前拒绝向任何人展示，那么你就是在进行一场下注巨大的赌博。早期很容易犯基本的设计错误。你冒着重新发明轮子的风险。而且你也失去了协作的好处：注意到你的邻居通过与他人合作而效率有多高？这就是人们在跳入深水区之前将脚趾浸入水中的原因：你需要确保你在做正确的事情，你在做正确的事情，而且以前从未做过。早期失误的可能性很高。你越早征求反馈，这种风险就越低。记住**「早失败、快失败、经常失败」**这句经得起考验的至理名言。&lt;/p>
&lt;p>&lt;strong>巴士因子：团队里因巴士撞倒的多少人，会导致项目失败。&lt;/strong>&lt;/p>
&lt;p>你的项目中的知识和技能分散程度如何？如果你是唯一了解原型代码工作原理的人，你需要会受到良好的工作保障，但如果你被公交车撞倒，项目就完蛋了。但是，如果你与同事合作，你的巴士因子就翻了一番。如果你有一个小团队一起进行设计和制作原型，情况会更好——当团队某个成员消失时，项目不会被孤立。记住：团队成员可能不会被公交车撞到，但其他不可预知的事件仍然会发生。有人可能会结婚、搬走、离开公司或请假照顾生病的亲属。确保每个责任领域除了一个主要和一个次要所有者之外，至少还有可用的文档，这有助于确保项目的成功，提高项目的成功率。希望大多数工程师认识到，&lt;strong>成为成功项目的一部分比成为失败项目的关键部分要好&lt;/strong>。&lt;/p>
&lt;p>当前 DevOps 对技术生产力的理念明确了这些目标：尽早获得反馈，尽早进行测试，尽早考虑安全和生产环境。这一切都与开发人员工作流程中的“左移”思想捆绑在一起；我们越早发现问题，修复它的成本就越低。&lt;/p>
&lt;p>「隐藏」归结起来就是：独自工作比与他人一起工作具有更高的内在风险。即使你可能害怕有人窃取你的想法或认为你不聪明，你更应该担心浪费大量时间在错误的事情上。&lt;/p>
&lt;p>在编程领域，孤独的工匠极其罕见，即使他们确实存在，他们也不会在真空中完成超人的成就；他们改变世界的成就几乎总是灵感迸发、团队英勇努力的结果。一个伟大的团队能够出色地利用它的超级明星，但整体总是大于各部分的总和。但打造一支集合多个超级明星球队是极其困难的。让我们把这个想法用更简单的话来说：&lt;strong>软件工程是一个团队的努力&lt;/strong>。&lt;/p>
&lt;p>你不能通过隐藏和准备你的秘密发明来改变世界或取悦数百万计的用户。你需要和其他人一起工作。分享你的愿景，分工，向别人学习，创建一个出色的团队。&lt;/p>
&lt;ul>
&lt;li>支柱 1：&lt;strong>谦逊&lt;/strong> 你不是宇宙的中心（你的代码也不是！）。你既不是全方位的，也不是绝对正确的。你愿意不断提升自我。&lt;/li>
&lt;li>支柱 2：&lt;strong>尊重&lt;/strong> 你真诚地关心与你一起工作的人。你善待他们，欣赏他们的能力和成就。&lt;/li>
&lt;li>支柱 3：&lt;strong>信任&lt;/strong> 你相信其他人有能力并且会做正确的事情，你可以让他们在适当的时候牵头。&lt;/li>
&lt;/ul>
&lt;p>不要低估社交游戏的力量。这不是欺骗或操纵人们；这是关于建立关系来完成事情。关系总是比项目更长久。&lt;/p>
&lt;p>我们普遍认为，如果你没有遭遇过失败，你就没有足够的创新或承担足够的风险的能力。失败被视为一个黄金机会，可以在下一次尝试中学习和改进。事实上，人们经常引用托马斯·爱迪生的话说：「如果我发现有一万种方法不能成功，我就没有失败。我并不气馁，因为每一个被抛弃的错误尝试都是向前迈出的另一步」。&lt;/p>
&lt;p>从错误中学习的关键是通过进行根因分析和撰写「事后总结」来记录你的失败，在谷歌（和许多其他公司）成为事后总结（国内成为复盘）。要格外小心，确保 「事后总结」文件不只是一份无用的道歉、借口或指责的清单，这不是它的目的。正确事后总结应该总是包含对所学到的内容的解释，以及作为学习经验作为后续的改进落地。然后，确保事后总结可以随时查阅，并确保团队真正贯彻执行所建议的改变。好的故障复盘要让其他人（现在和将来）知道发生了什么，避免重蹈覆辙。不要抹去你的足迹——让它们在道路上照亮给那些追随你的人!&lt;/p>
&lt;p>一个好的事后总结应该包括以下内容：事件的简要概述事件的时间线，从发现、调查到解决的过程事件的主要原因影响和损害评估一套立即解决该问题的行动项目（包括执行人）。一套防止事件再次发生的行动项目经验教训&lt;/p>
&lt;p>要想让别人正确地听取你的意见，你首先需要倾听别人的意见。最好在下定决心或坚定地宣布决定之前进行倾听——如果你不断地改变主意，人们会认为你不坚定。&lt;/p>
&lt;p>从长远来看，承认自己犯了错误，或者根本不在你的能力范围，都会提高你的地位。事实上，表达脆弱性的意愿是一种谦逊的外在表现，它表明了责任感和承担责任的意愿，也是你信任他人意见的信号。作为回报，人们最终会尊重你的诚实和力量。有时，你能做的最好的事情就是说，「我不知道」。&lt;/p>
&lt;p>在模棱两可中茁壮成长即使在环境不断变化的情况下，也能处理相互冲突的信息或方向，建立共识，并对问题做出改进。重视反馈谦虚优雅地接受和给出反馈，理解反馈对个人（和团队）发展的价值。走出舒适区 能够设定宏伟的目标并去追求，即使有来自他人的抵制或惰性。&lt;/p>
&lt;p>&lt;strong>客户第一&lt;/strong> 对谷歌产品的用户抱有同情和尊重，并追求符合其最佳利益的行动。&lt;/p>
&lt;p>&lt;strong>关心团队&lt;/strong> 对同事抱有同情心和尊重，并积极主动地帮助他们，提高团队凝聚力。&lt;/p>
&lt;p>&lt;strong>做正确的事&lt;/strong> 对自己所做的一切有强烈的主人感；愿意做出困难或不易的决定以保护团队和产品的完整。&lt;/p>
&lt;p>几乎任何规模的软件工作的基础都是一个运作良好的团队。尽管软件开发者单打独斗的「天才神话 」仍然存在，但事实是，没有人能够真正地单干。一个软件组织要想经受住时间的考验，就必须有一种健康的文化，植根于谦逊、信任和尊重，围绕着团队而不是个人。此外，软件开发的创造性要求人们承担风险并偶尔失败；为了让人们接受这种失败，必须有一个健康的团队环境。&lt;/p></description></item><item><title>《程序员修炼之道：从小工到专家》摘要</title><link>https://andornot.xyz/posts/the-pragmatic-programmer-note/</link><pubDate>Sun, 18 Sep 2022 21:18:10 +0800</pubDate><guid>https://andornot.xyz/posts/the-pragmatic-programmer-note/</guid><description>&lt;img src="https://andornot.xyz/the-pragmatic-programmer-note-cover.png" alt="Featured image of post 《程序员修炼之道：从小工到专家》摘要" />&lt;p>该文章为笔者读《程序员修炼之道：从小工到专家》时所记摘要，录以备考假以时日待作感悟。&lt;/p>
&lt;h2 id="我的源码让猫给吃了">我的源码让猫给吃了
&lt;/h2>&lt;p>依据你的职业发展、你的项目和你每天的工作，为你自己和你的行为负责这样一种观念，是注重实效的哲学的一块基石。注重实效的程序员对他或她自己的职业生涯负责，并且不害怕承认无知或错误。&lt;/p>
&lt;p>&lt;strong>Provide Options, Don&amp;rsquo;t Make Lame Excuses 提供各种选择，不要找蹩脚的借口&lt;/strong>&lt;/p>
&lt;h2 id="软件的熵">软件的熵
&lt;/h2>&lt;p>尽管软件开发几乎不受任何物理定律的约束，熵（entropy）对我们的影响却很大。熵是一个来自物理学的概念，指的是某个系统中的「无序」的总量。遗憾的是，热力学定律保证了宇宙中的熵倾向于最大化。当软件中的无序增长时，程序员们称之为「软件腐烂」（software rot）。&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t Live with Broken Windows 不要容忍破窗户&lt;/strong>&lt;/p>
&lt;p>置之不理都会更快地加速腐烂的进程&lt;/p>
&lt;h2 id="石头汤与煮青蛙">石头汤与煮青蛙
&lt;/h2>&lt;p>&lt;strong>Be a Catalyst for Change 做变化的催化剂&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Remember the Big Picture 记住大图景&lt;/strong>&lt;/p>
&lt;h2 id="足够好的软件">足够好的软件
&lt;/h2>&lt;p>&lt;strong>Make Quality a Requirements Issue 使质量成为需求问题&lt;/strong>&lt;/p>
&lt;p>不要因为过度修饰和过于求精而毁损完好的程序。继续前进，让你的代码凭着自己的质量站立一会儿。它也许不完美，但不用担心：它不可能完美。&lt;/p>
&lt;h2 id="你的知识资产">你的知识资产
&lt;/h2>&lt;p>管理知识资产与管理金融资产非常相似：&lt;/p>
&lt;ol>
&lt;li>严肃的投资者定期投资——作为习惯。&lt;/li>
&lt;li>多元化是长期成功的关键。&lt;/li>
&lt;li>聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产。&lt;/li>
&lt;li>投资者设法低买高卖，以获取最大回报。&lt;/li>
&lt;li>应周期性地重新评估和平衡资产。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资&lt;/strong>&lt;/p>
&lt;p>学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式拓展。思想的「异花授粉」（cross-pollination）十分重要；设法把你学到的东西应用到你当前的项目中。即使你的项目没有使用该技术，你或许也能借鉴一些想法。&lt;/p>
&lt;p>批判地思考你读到的和听到的。你需要确保你的资产中的知识是准确的，并且没有受到供应商或媒体炒作的影响。警惕声称他们的信条提供了唯一答案的狂热者——那或许适用、或许不适用于你和你的项目。&lt;/p>
&lt;p>&lt;strong>Critically Analyze What You Read and Hear 批判地分析你读到的和听到的&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>确切地知道你想要问什么，并尽量明确具体。&lt;/li>
&lt;li>小心而得体地组织你的问题。记住你是在请求帮助；不要显得好像是在要求对方回答。&lt;/li>
&lt;li>组织好问题之后，停下来，再找找答案。选出一些关键字，搜索 Web。查找适当的 FAQ （常见问题的解答列表）。&lt;/li>
&lt;li>决定你是想公开提问还是私下提问。&lt;/li>
&lt;li>坐回椅子上，耐心等候。人们很忙，也许需要几天才能得到明确的答案。&lt;/li>
&lt;/ul>
&lt;h2 id="交流">交流
&lt;/h2>&lt;p>没有有效的交流，一个好想法就只是一个无人关心的孤儿。&lt;/p>
&lt;p>&lt;img src="https://andornot.xyz/posts/the-pragmatic-programmer-note/poem.jpeg"
width="942"
height="286"
srcset="https://andornot.xyz/posts/the-pragmatic-programmer-note/poem_hu_4fdafbc31d8cde49.jpeg 480w, https://andornot.xyz/posts/the-pragmatic-programmer-note/poem_hu_4628c177c4ed3133.jpeg 1024w"
loading="lazy"
alt="poem"
class="gallery-image"
data-flex-grow="329"
data-flex-basis="790px"
>&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s Both What You Say and the Way You Say It 你说什么和你怎么说同样重要&lt;/strong>&lt;/p>
&lt;h2 id="重复的危害">重复的危害
&lt;/h2>&lt;p>系统中的每一项知识都必须具有单一、无歧义、权威的表示。&lt;/p>
&lt;p>&lt;strong>DRY-Don&amp;rsquo;t Repeat Yourself 不要重复你自己&lt;/strong>&lt;/p>
&lt;p>糟糕的代码才需要许多注释。DRY 法则告诉我们，要把低级的知识放在代码中，它属于那里；把注释保留给其他的高级说明。否则，我们就是在重复知识，而每一次改变都意味着既要改变代码，也要改变注释。注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。&lt;/p>
&lt;p>&lt;strong>Make It Easy to Reuse 让复用变得容易&lt;/strong>&lt;/p>
&lt;h2 id="正交性">正交性
&lt;/h2>&lt;p>「正交性」是从几何学中借来的术语。如果两条直线相交成直角，它们就是正交的，比如图中的坐标轴。用向量术语说，这两条直线互不依赖。沿着某一条直线移动，你投影到另一条直线上的位置不变。&lt;/p>
&lt;p>在计算技术中，该术语用于表示某种不相依赖性或是解耦性。如果两个或更多事物中的一个发生变化，不会影响其他事物，这些事物就是正交的。在设计良好的系统中，数据库代码与用户界面是正交的：你可以改动界面，而不影响数据库；更换数据库，而不用改动界面。&lt;/p>
&lt;p>非正交系统的改变与控制更复杂是其固有的性质。当任何系统的各组件互相高度依赖时，就不再有局部修正（local fix）这样的事情。&lt;/p>
&lt;p>&lt;strong>Eliminate Effects Between Unrelated Things 消除无关事物之间的影响&lt;/strong>&lt;/p>
&lt;h2 id="曳光弹">曳光弹
&lt;/h2>&lt;p>曳光代码并非用过就扔的代码：你编写它，是为了保留它。它含有任何一段产品代码都拥有的完整的错误检查、结构、文档、以及自查。它只不过功能不全而已。但是，一旦你在系统的各组件间实现了端到端（end-to-end）的连接，你就可以检查你离目标还有多远，并在必要的情况下进行调整。一旦你完全瞄准，增加功能将是一件容易的事情。&lt;/p>
&lt;p>曳光代码也是如此。你在不能 100%确定该去往何处的情形下使用这项技术。如果最初的几次尝试错过了目标——用户说：「那不是我的意思」，你需要的数据在你需要它时不可用，或是性能好像有问题——你不应感到惊奇。找出怎样改变已有的东西、让其更接近目标的办法，并且为你使用了一种简约的开发方法而感到高兴。小段代码的惯性也小——要改变它更容易、更迅速。你能够搜集关于你的应用的反馈，而且与其他任何方法相比，你能够花费较少代价、更为迅速地生成新的、更为准确的版本。同时，因为每个主要的应用组件都已表现在你的曳光代码中，用户可以确信，他们所看到的东西具有现实基础，不仅仅是纸上的规范。&lt;/p>
&lt;p>原型制作生成用过就扔的代码。曳光代码虽然简约，但却是完整的，并且构成了最终系统的骨架的一部分。你可以把原型制作视为在第一发曳光弹发射之前进行的侦察和情报搜集工作。&lt;/p>
&lt;h2 id="领域语言">领域语言
&lt;/h2>&lt;p>&lt;strong>Program Close to the Problem domain 靠近问题领域编程&lt;/strong>&lt;/p>
&lt;p>通过在更高的抽象层面上编码，你获得了专心解决领域问题的自由，并且可以忽略琐碎的实现细节。&lt;/p>
&lt;h2 id="估算">估算
&lt;/h2>&lt;p>&lt;strong>Estimate to Avoid Surprises 估算，以避免发生意外&lt;/strong>&lt;/p>
&lt;h2 id="纯文本的威力">纯文本的威力
&lt;/h2>&lt;p>&lt;strong>Keep Knowledge in Plain Text 用纯文本保存知识&lt;/strong>&lt;/p>
&lt;p>使用纯文本有两个主要缺点：&lt;/p>
&lt;ol>
&lt;li>与压缩的二进制格式相比，存储纯文本所需空间更多。&lt;/li>
&lt;li>要解释及处理纯文本文件，计算上的代价可能更昂贵。&lt;/li>
&lt;/ol>
&lt;p>人能够阅读的数据形式，以及自描述的数据，将比所有其他的数据形式和创建它们的应用都活得更长久。&lt;/p>
&lt;p>对于大多数二进制文件，要成功地进行解析，你必须了解整个格式的所有细节。&lt;/p>
&lt;h2 id="shell-游戏">shell 游戏
&lt;/h2>&lt;p>GUI 的好处是 WYSIWYG——所见即所得（what you see is what you get）。缺点是 WYSIAYG——所见即全部所得（what you see is all you get）。&lt;/p>
&lt;p>&lt;strong>Use the Power of Command Shells 利用命令 shell 的力量&lt;/strong>&lt;/p>
&lt;h2 id="强力编辑">强力编辑
&lt;/h2>&lt;p>&lt;strong>Use a Single Editor Well 用好一种编辑器&lt;/strong>&lt;/p>
&lt;h2 id="源码控制">源码控制
&lt;/h2>&lt;p>&lt;em>进步远非由变化组成，而是取决于好记性。不能记住过去的人，被判重复过去。——George Santayana, Life of Reason&lt;/em>&lt;/p>
&lt;p>&lt;strong>Always Use Source Code Control 总是使用源码控制&lt;/strong>&lt;/p>
&lt;h2 id="调试">调试
&lt;/h2>&lt;p>&lt;strong>Fix the Problem, Not the Blame 要修正问题，而不是发出指责&lt;/strong>&lt;/p>
&lt;p>如果你目睹 bug 或见到 bug 报告时的第一反应是「那不可能」，你就完全错了。一个脑细胞都不要浪费在以「但那不可能发生」起头的思路上，因为很明显，那不仅可能，而且已经发生了。&lt;/p>
&lt;p>在调试时小心「近视」。要抵制只修正你看到的症状的急迫愿望：更有可能的情况是，实际的故障离你正在观察的地方可能还有几步远，并且可能涉及许多其他的相关事物。要总是设法找出问题的根源，而不只是问题的特定表现。&lt;/p>
&lt;p>找到问题的原因的一种非常简单、却又特别有用的技术是向别人解释它。他应该越过你的肩膀看着屏幕，不断点头（像澡盆里上下晃动的橡皮鸭）。他们一个字也不需要说；你只是一步步解释代码要做什么，常常就能让问题从屏幕上跳出来，宣布自己的存在。&lt;/p>
&lt;p>记住，如果你看到马蹄印，要想到马，而不是斑马。OS 很可能没有问题。数据库也很可能情况良好。&lt;/p>
&lt;p>某样东西出错时，你感到吃惊的程度与你对正在运行的代码的信任及信心成正比。这就是为什么，在面对「让人吃惊」的故障时，你必须意识到你的一个或更多的假设是错的。不要因为你「知道」它能工作而轻易放过与 bug 有牵连的例程或代码。证明它。用这些数据、这些边界条件、在这个语境中证明它。&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t Assume it Prove It 不要假定，要证明&lt;/strong>&lt;/p>
&lt;h2 id="文本操纵">文本操纵
&lt;/h2>&lt;p>&lt;strong>Learn a Text Manipulation Language 学习一种文本操纵语言&lt;/strong>&lt;/p>
&lt;h2 id="代码生成器">代码生成器
&lt;/h2>&lt;p>&lt;strong>Write Code That Writes Code 编写能编写代码的代码&lt;/strong>&lt;/p>
&lt;h2 id="注重实效的偏执">注重实效的偏执
&lt;/h2>&lt;p>&lt;strong>You Can&amp;rsquo;t Write Perfect Software 你不可能写出完美的软件&lt;/strong>&lt;/p>
&lt;h2 id="按合约设计">按合约设计
&lt;/h2>&lt;p>&lt;strong>Design with Contracts 通过合约进行设计&lt;/strong>&lt;/p>
&lt;h2 id="死程序不说谎">死程序不说谎
&lt;/h2>&lt;p>&lt;strong>Crash Early 早崩溃要崩溃，不要破坏（trash）&lt;/strong>&lt;/p>
&lt;h2 id="断言式编程">断言式编程
&lt;/h2>&lt;p>&lt;strong>If It Can&amp;rsquo;t Happen, Use Assertions to Ensure That It Won&amp;rsquo;t 如果它不可能发生，用断言确保它不会发生&lt;/strong>&lt;/p>
&lt;h2 id="何时使用异常">何时使用异常
&lt;/h2>&lt;p>「如果我移走所有的异常处理器，这些代码是否仍然能运行？」如果答案是「否」，那么异常也许就正在被用在非异常的情形中。&lt;/p>
&lt;p>&lt;strong>Use Exceptions for Exceptional Problems 将异常用于异常的问题&lt;/strong>&lt;/p>
&lt;p>异常表示即时的、非局部的控制转移——这是一种级联的（cascading）goto。&lt;/p>
&lt;h2 id="怎样配平资源">怎样配平资源
&lt;/h2>&lt;p>只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器——所有数量有限的事物。大多数时候，资源使用遵循一种可预测的模式：你分配资源、使用它，然后解除其分配。&lt;/p>
&lt;p>对于一次需要不只一个资源的例程，可以对资源分配的基本模式进行扩展。有两个另外的建议：&lt;/p>
&lt;ol>
&lt;li>以与资源分配的次序相反的次序解除资源的分配。这样，如果一个资源含有对另一个资源的引用，你就不会造成资源被遗弃。&lt;/li>
&lt;li>在代码的不同地方分配同一组资源时，总是以相同的次序分配它们。这将降低发生死锁的可能性。（如果进程 A 申请了 resource1，并正要申请 resource2，而进程 B 申请了 resource2，并试图获得 resource1，这两个进程就会永远等待下去。）&lt;/li>
&lt;/ol>
&lt;h2 id="解耦与得墨忒耳法则">解耦与得墨忒耳法则
&lt;/h2>&lt;p>&lt;strong>Minimize Coupling Between Modules 使模块之间的耦合减至最少&lt;/strong>&lt;/p>
&lt;h2 id="元程序设计">元程序设计
&lt;/h2>&lt;p>&lt;strong>Configure, Don&amp;rsquo;t Integrate 要配置，不要集成&lt;/strong>&lt;/p>
&lt;p>要用元数据（metadata）描述应用的配置选项：调谐参数、用户偏好（user preference）、安装目录，等等。&lt;/p>
&lt;p>&lt;strong>Put Abstractions in Code, Details in Metadata 将抽象放进代码，细节放进元数据&lt;/strong>&lt;/p>
&lt;h2 id="时间耦合">时间耦合
&lt;/h2>&lt;p>时间是软件架构的一个常常被忽视的方面。吸引我们的时间只是进度表上的时间，发布之前我们剩余的时间——但这不是我们这里在谈论的时间。相反，我们谈论的是，作为软件自身的一种设计要素的时间的角色。时间有两个方面对我们很重要：&lt;strong>并发&lt;/strong>（事情在同一时间发生）和&lt;strong>次序&lt;/strong>（事情在时间中的相对位置）。&lt;/p>
&lt;p>我们需要容许并发，并考虑解除任何时间或次序上的依赖。这样做，我们可以获得灵活性，并减少许多开发领域中的任何基于时间的依赖：工作流分析、架构、设计、还有部署。&lt;/p>
&lt;p>&lt;strong>Analyze Workflow to Improve Concurrency 分析工作流，以改善并发性&lt;/strong>&lt;/p>
&lt;p>Design Using Services 用服务进行设计实际上我们创建的不是组件，而是服务——位于定义良好的、一致的接口之后的独立、并发的对象。&lt;/p>
&lt;p>&lt;strong>Always Design for Concurrency 总是为并发进行设计&lt;/strong>&lt;/p>
&lt;h2 id="靠巧合编程">靠巧合编程
&lt;/h2>&lt;p>&lt;strong>Don&amp;rsquo;t Program by Coincidence 不要靠巧合编程&lt;/strong>&lt;/p>
&lt;p>不要做历史的奴隶。不要让已有的代码支配将来的代码。如果不再适用，所有的代码都可被替换。即使是在一个程序中，也不要让你已经做完的事情约束你下一步要做的事情——准备好进行重构。&lt;/p>
&lt;h2 id="算法速率">算法速率
&lt;/h2>&lt;p>把 &lt;strong>&lt;em>O&lt;/em>&lt;/strong> 视为「阶为……」（on the order of）的意思。&lt;strong>&lt;em>O( )&lt;/em>&lt;/strong> 表示法对我们在度量的事物（时间、内存，等等）的值设置了上限。&lt;/p>
&lt;p>&lt;img src="https://andornot.xyz/posts/the-pragmatic-programmer-note/order-chart.jpeg"
width="1042"
height="929"
srcset="https://andornot.xyz/posts/the-pragmatic-programmer-note/order-chart_hu_803e55fe966cedb8.jpeg 480w, https://andornot.xyz/posts/the-pragmatic-programmer-note/order-chart_hu_b88c722ae3bfb213.jpeg 1024w"
loading="lazy"
alt="Order Chart"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;p>嵌套循环。如果你需要在循环中嵌套另外的循环，那么你的算法就变成了**&lt;em>O(m x n)&lt;/em>** ，这里的 m 和 n 是两个循环的界限。&lt;/p>
&lt;p>这通常发生在简单的排序算法中，比如冒泡排序：外循环依次扫描数组中的每个元素，内循环确定在排序结果的何处放置该元素。这样的排序算法往往是 &lt;strong>&lt;em>O(n2)&lt;/em>&lt;/strong> 。&lt;/p>
&lt;p>简单循环。如果某个简单循环从 1 运行到 n，那么算法很可能就是 &lt;strong>&lt;em>O(n)&lt;/em>&lt;/strong> ——时间随 n 线性增加。其例子有穷举查找、找到数组中的最大值、以及生成校验和。&lt;/p>
&lt;p>二分法。如果你的算法在每次循环时把事物集合一分为二，那么它很可能是对数型 &lt;strong>&lt;em>O(lg(n))&lt;/em>&lt;/strong> 算法&lt;/p>
&lt;p>对有序列表的二分查找、遍历二杈树、以及查找机器字中的第一个置位了的位，都可能是 &lt;strong>&lt;em>O(ln(n))&lt;/em>&lt;/strong> 算法。&lt;/p>
&lt;p>分而治之。划分其输入，并独立地在两个部分上进行处理，然后再把结果组合起来的算法可能是 &lt;strong>&lt;em>O(nln(n))&lt;/em>&lt;/strong> 。经典例子是快速排序，其工作方式是：把数据划分为两半，并递归地对每一半进行排序。尽管在技术上是 &lt;strong>&lt;em>O(n2)&lt;/em>&lt;/strong> ，但因为其行为在馈入的是排过序的输入时会退化，快速排序的平均运行时间是 &lt;strong>&lt;em>O(nln(n))&lt;/em>&lt;/strong> 。&lt;/p>
&lt;p>组合。只要算法考虑事物的排列，其运行时间就有可能失去控制。这是因为排列涉及到阶乘（从数字 1 到 5 有 5！=5×4×3×2×1=120 种排列）。得出 5 个元素的组合算法所需的时间：6 个元素需要 6 倍的时间，7 个元素则需要 42 倍的时间。其例子包括许多公认的难题的算法——旅行商问题、把东西最优地包装进容器中、划分一组数、使每一组都有相同的总和，等等。在特定问题领域中，常常用启发式方法（heuristics）减少这些类型的算法的运行时间。&lt;/p>
&lt;h2 id="重构">重构
&lt;/h2>&lt;p>与建筑相比，软件更像是园艺——它比混凝土更有机。你根据最初的计划和各种条件在花园里种植许多花木。有些花木茁壮成长，另一些注定要成为堆肥。你可能会改变植株的相对位置，以有效利用光影、风雨的交互作用。过度生长的植株会被分栽或修剪，颜色不协调的会被移栽到从美学上看更怡人的地方。你拔除野草，并给需要额外照料的植株施肥。你不断关注花园的兴旺，并按照需要（对土壤、植株、布局）做出调整。&lt;/p>
&lt;p>把需要重构的代码当作是一种「肿瘤」。切除它需要进行「侵入性」的外科手术。你可以现在手术，趁它还小把它取出来。你也可以等它增大并扩散——但那时再切除它就会更昂贵、更危险。等得再久一点，「病人」就有可能会丧命。&lt;/p>
&lt;ol>
&lt;li>不要试图在重构的同时增加功能。&lt;/li>
&lt;li>在开始重构之前，确保你拥有良好的测试。尽可能经常运行这些测试。这样，如果你的改动破坏了任何东西，你就能很快知道。&lt;/li>
&lt;/ol>
&lt;h2 id="易于测试的代码">易于测试的代码
&lt;/h2>&lt;p>软件的单元测试是对模块进行演练的代码。在典型情况下，单元测试将建立某种人工环境，然后调用被测试模块中的例程。然后，它根据已知的值，或是同一测试先前返回的结果（回归测试），对返回的结果进行检查。&lt;/p>
&lt;h2 id="需求之坑">需求之坑
&lt;/h2>&lt;p>&lt;em>完美，不是在没有什么需要增加、而是在没有什么需要去掉时达到的。——Antoine de St.Exupery, Wind, Sand, and Stars,1939&lt;/em>&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t Gather Requirements-Dig for Them 不要搜集需求——挖掘它们&lt;/strong>&lt;/p>
&lt;p>当你在尘土里四处挖掘时，你怎样才能识别出真实的需求？答案既简单又复杂。简单的回答是，需求是对需要完成的某件事情的陈述。&lt;/p>
&lt;p>找出用户为何要做特定事情的原因、而不只是他们目前做这件事情的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不只是满足他们陈述的需求。&lt;/p>
&lt;p>&lt;strong>Work with a User to Think Like a User 与用户一同工作，以像用户一样思考&lt;/strong>&lt;/p>
&lt;p>制作需求文档时的一大危险是太过具体。好的需求文档会保持抽象。在涉及需求的地方，最简单的、能够准确地反映商业需要的陈述是最好的。这并非意味着你可以含糊不清——你必须把底层的语义不变项当作需求进行捕捉，并把具体的或当前的工作实践当作政策记入文档。需求不是架构。需求不是设计，也不是用户界面。需求是需要。&lt;/p>
&lt;p>&lt;strong>Abstractions Live Longer than Details 抽象比细节活得更长久&lt;/strong>&lt;/p>
&lt;p>许多项目的失败都被归咎于项目范围的增大——也称为特性膨胀（feature bloat）、蔓延特性论（creeping featurism）、或是需求蔓延（requirement creep）。&lt;/p>
&lt;p>要创建并维护项目词汇表（project glossary）——这是定义项目中使用的专用术语和词汇的地方。项目的所有参与者，从最终用户到支持人员，都应该使用这个词汇表，以确保一致性。这就意味着，可以访问词汇表的人员范围应该很广泛——这是采用基于 Web 的文档的一个有效论据。&lt;/p>
&lt;h2 id="解开不可能解开的谜题">解开不可能解开的谜题
&lt;/h2>&lt;p>流行的俗话「在盒子外面思考」鼓励我们找出可能不适用的约束，并忽略它们。但这个俗话并不完全准确。如果「盒子」是各种约束和条件的边界，那么诀窍就在于找到盒子——它可能比你以为的要大得多。&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t Think Outside the Box-Find the Box 不要在盒子外面思考——要找到盒子&lt;/strong>&lt;/p>
&lt;p>在面对棘手的问题时，列出所有在你面前的可能途径。不要排除任何东西，不管它听起来有多无用或愚蠢。现在，逐一检查列表中的每一项，并解释为何不能采用某个特定的途径。你确定吗？你能否证明？&lt;/p>
&lt;p>有时你会发现，自己在处理的问题似乎比你以为的要难得多。感觉上好像是你走错了路——一定有比这更更容易的方法！或许现在你已落在了进度表后面，甚或失去了让系统工作起来的信心，因为这个特定的问题是「不可能解决的」。这正是你退回一步，问问自己以下问题的时候：有更容易的方法吗？你是在设法解决真正的问题，还是被外围的技术问题转移了注意力？这件事情为什么是一个问题？是什么使它如此难以解决？它必须以这种方式完成吗？它真的必须完成吗？很多时候，当你设法回答这些问题时，你会有让自己吃惊的发现。很多时候，对需求的重新诠释能让整个问题全都消失——就像是戈尔迪斯结。&lt;/p>
&lt;h2 id="等你准备好">等你准备好
&lt;/h2>&lt;p>&lt;strong>Listen to Nagging Doubts-Start When You&amp;rsquo;re Ready 倾听反复出现的疑虑——等你准备好再开始&lt;/strong>&lt;/p>
&lt;h2 id="规范陷阱">规范陷阱
&lt;/h2>&lt;p>&lt;strong>Some Things Are Better Done than Described 对有些事情「做」胜于「描述」&lt;/strong>&lt;/p>
&lt;h2 id="圆圈与箭头">圆圈与箭头
&lt;/h2>&lt;p>还有一些开发者，在有许多已沉没项目的大海里漂流，不断抓住最新的时尚，就像是遇到海难的人紧紧抓住漂来的木头一样。每当有新的木头漂过时，他们都会费力地游过去，希望这一块会更好。但到最后，不管漂浮物有多好，这些开发者仍然漫无目的地漂流着。&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t Be a Slave to Formal Methods 不要做形式方法的奴隶&lt;/strong>&lt;/p>
&lt;h2 id="注重实效的团队">注重实效的团队
&lt;/h2>&lt;p>&lt;strong>Organize Around Functionality, Not Job Functions 围绕功能、而不是工作职务进行组织&lt;/strong>&lt;/p>
&lt;h2 id="无情的测试">无情的测试
&lt;/h2>&lt;p>&lt;strong>Coding Ain&amp;rsquo;t Done&amp;rsquo;Til All the Tests Run 要到通过全部测试，编码才算完成&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Use Saboteurs to Test Your Testing 通过「蓄意破坏」测试你的测试&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Test State Coverage, Not Code Coverage 测试状态覆盖，而不是代码覆盖&lt;/strong>&lt;/p>
&lt;h2 id="极大的期望">极大的期望
&lt;/h2>&lt;p>在抽象的意义上，应用如果能正确实现其规范，就是成功的。遗憾的是，这只能付抽象的账。在现实中，项目的成功是由它在多大程度上满足了用户的期望来衡量的。不符合用户预期的项目注定是失败的，不管交付的产品在绝对的意义上有多好。&lt;/p>
&lt;p>&lt;strong>Gently Exceed Your Users&amp;rsquo; Expectations 温和地超出用户的期望&lt;/strong>&lt;/p>
&lt;h2 id="傲慢与偏见">傲慢与偏见
&lt;/h2>&lt;p>我们想要看到对所有权的自豪。「这是我编写的，我对自己的工作负责。」你的签名应该被视为质量的保证。当人们在一段代码上看到你的名字时，应该期望它是可靠的、用心编写的、测试过的和有文档的，一个真正的专业作品，由真正的专业人员编写。&lt;/p>
&lt;h2 id="建设藏书库">建设藏书库
&lt;/h2>&lt;h3 id="分析与设计">分析与设计
&lt;/h3>&lt;ul>
&lt;li>《Object-Oriented Software Construction，2nd Edition》 Bertrand Meyer 的史诗般的著作，论述面向对象开发的基本原理。&lt;/li>
&lt;li>《Design Patterns》设计模式在比编程语言惯用手法更高的层面上描述解决特定类型的问题的途径。这本由 Gang of Four 撰写、现已成为经典的书籍描述了 23 种基本的设计模式，包括 Proxy、Visitor 和 Singleton，等等。&lt;/li>
&lt;li>《Analysis Patterns》一个高级架构型模式的宝藏，取自广泛的真实项目，「蒸馏」成书籍的形式。相对快速地深入了解多年建模经验的途径。&lt;/li>
&lt;/ul>
&lt;h3 id="团队与项目">团队与项目
&lt;/h3>&lt;ul>
&lt;li>《The Mythical Man Month》 Fred Brooks 的经典著作，论述项目团队组织的各种危险，最近作了修订。&lt;/li>
&lt;li>《Dynamics of Software Development》一系列论述大型团队软件构建的短文，着重讨论团队成员之间、团队与外界之间的动力机制。&lt;/li>
&lt;li>《Surviving Object-Oriented Projects: A Manager’s Guide》 Alistair Cockburn 的「战地报导」，阐释 OO 项目管理的许多危险和陷阱——特别是你的第一个项目。Cockburn 先生提供了能让你解决最常见问题的提示与技术。&lt;/li>
&lt;/ul>
&lt;h2 id="注重实效的程序员之快速参考指南-the-pragmatic-programmer-quick-reference-guide">注重实效的程序员之快速参考指南 The Pragmatic Programmer Quick Reference Guide
&lt;/h2>&lt;ol>
&lt;li>关心你的技艺 Care About Your Craft。如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？&lt;/li>
&lt;li>思考！你的工作 Think! About Your Work。关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。&lt;/li>
&lt;li>提供各种选择，不要找蹩脚的借口 Provide Options, Don&amp;rsquo;t Make Lame Excuses 要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。&lt;/li>
&lt;li>不要容忍破窗户 Don&amp;rsquo;t Live with Broken Windows 当你看到糟糕的设计、错误的决策和糟糕的代码时，修正它们。&lt;/li>
&lt;li>做变化的催化剂 Be a Catalyst for Change 你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。&lt;/li>
&lt;li>记住大图景 Remember the Big Picture 不要太过专注于细节，以致忘了查看你周围正在发生什么。&lt;/li>
&lt;li>使质量成为需求问题 Make Quality a Requirements Issue 让你的用户参与确定项目真正的质量需求。&lt;/li>
&lt;li>定期为你的知识资产投资 Invest Regularly in Your Knowledge Portfolio 让学习成为习惯。&lt;/li>
&lt;li>批判地分析你读到的和听到的 Critically Analyze What You Read and Hear 不要被供应商、媒体炒作、或教条左右。要依照你自己的看法和你的项目的情况去对信息进行分析。&lt;/li>
&lt;li>你说什么和你怎么说同样重要 It&amp;rsquo;s Both What You Say and the Way You Say It 如果你不能有效地向他人传达你的了不起的想法，这些想法就毫无用处。&lt;/li>
&lt;li>不要重复你自己 DRY-Don&amp;rsquo;t Repeat Yourself 系统中的每一项知识都必须具有单一、无歧义、权威的表示。&lt;/li>
&lt;li>让复用变得容易 Make It Easy to Reuse 如果复用很容易，人们就会去复用。创造一个支持复用的环境。&lt;/li>
&lt;li>消除无关事物之间的影响 Eliminate Effects Between Unrelated Things 设计自足、独立、并具有单一、良好定义的目的的组件。&lt;/li>
&lt;li>不存在最终决策 There Are No Final Decisions 没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。&lt;/li>
&lt;li>用曳光弹找到目标 Use Tracer Bullets to Find the Target 曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。&lt;/li>
&lt;li>为了学习而制作原型 Prototype to Learn 原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的经验教训。&lt;/li>
&lt;li>靠近问题领域编程 Program Close to the Problem domain 用你的用户的语言进行设计和编码。&lt;/li>
&lt;li>估算，以避免发生意外 Estimate to Avoid Surprises 在着手之前先进行估算。你将提前发现潜在的问题。&lt;/li>
&lt;li>通过代码对进度表进行迭代 Iterate the Schedule with the Code 用你在进行实现时获得的经验提炼项目的时间标度。&lt;/li>
&lt;li>用纯文本保存知识 Keep Knowledge in Plain Text 纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。&lt;/li>
&lt;li>利用命令 shell 的力量 Use the Power of Command Shells 当图形用户界面无能为力时使用 shell。&lt;/li>
&lt;li>用好一种编辑器 Use a Single Editor Well 编辑器应该是你的手的延伸；确保你的编辑器是可配置、可扩展和可编程的。&lt;/li>
&lt;li>总是使用源码控制 Always Use Source Code Control 源码控制是你的工作的时间机器——你能够回到过去。&lt;/li>
&lt;li>要修正问题，而不是发出指责 Fix the Problem, Not the Blame bug 是你的过错还是别人的过错，并不是真的很有关系——它仍然是你的问题，它仍然需要修正。&lt;/li>
&lt;li>不要恐慌 Don&amp;rsquo;t Panic When Debuging 做一次深呼吸，思考什么可能是 bug 的原因。&lt;/li>
&lt;li>”Select” 没有问题 &amp;ldquo;Select&amp;rdquo; Isn&amp;rsquo;t Broken 在 OS 或编译器、甚或是第三方产品或库中很少发现 bug。bug 很可能在应用中。&lt;/li>
&lt;li>不要假定，要证明 Don&amp;rsquo;t Assume It-Prove It 在实际环境中——使用真正的数据和边界条件——证明你的假定。&lt;/li>
&lt;li>学习一种文本操纵语言 Learn a Text Manipulation Language 你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？&lt;/li>
&lt;li>编写能编写代码的代码 Write Code That Writes Code 代码生成器能提高你的生产率，并有助于避免重复。&lt;/li>
&lt;li>你不可能写出完美的软件 You Can&amp;rsquo;t Write Perfect Software 软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。&lt;/li>
&lt;li>通过合约进行设计 Design with Contracts 使用合约建立文档，并检验代码所做的事情正好是它声明要做的。&lt;/li>
&lt;li>早崩溃 Crash Early 死程序造成的危害通常比有问题的程序要小得多。&lt;/li>
&lt;li>用断言避免不可能发生的事情 Use Assertions to Prevent the Impossible 断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。&lt;/li>
&lt;li>将异常用于异常的问题 Use Exceptions for Exceptional Problems 异常可能会遭受经典的意大利面条式代码的所有可读性和可维护性问题的折磨。将异常保留给异常的事物。&lt;/li>
&lt;li>要有始有终 Finish What You Start 只要可能，分配某资源的例程或对象也应该负责解除其分配。&lt;/li>
&lt;li>使模块之间的耦合减至最少 Minimize Coupling Between Modules 通过编写「羞怯的」代码并应用得墨忒耳法则来避免耦合。&lt;/li>
&lt;li>要配置，不要集成 Configure, Don&amp;rsquo;t Integrate 要将应用的各种技术选择实现为配置选项，而不是通过集成或工程方法实现。&lt;/li>
&lt;li>将抽象放进代码，细节放进元数据 Put Abstractions in Code, Details in Metadata 为一般情况编程，将细节放在被编译的代码库之外。&lt;/li>
&lt;li>分析工作流，以改善并发性 Analyze Workflow to Improve Concurrency 利用你的用户的工作流中的并发性。&lt;/li>
&lt;li>用服务进行设计 Design Using Services 根据服务——独立的、在良好定义、一致的接口之后的并发对象——进行设计。&lt;/li>
&lt;li>总是为并发进行设计 Always Design for Concurrency 容许并发，你将会设计出更整洁、具有更少假定的接口。&lt;/li>
&lt;li>使视图与模型分离 Separate Views from Models 要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。&lt;/li>
&lt;li>用黑板协调工作流 Use Blackboards to Coordinate Workflow 用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔&lt;/li>
&lt;li>不要靠巧合编程 Don&amp;rsquo;t Program by Coincidence 只依靠可靠的事物。注意偶发的复杂性，不要把幸运的巧合与有目的的计划混为一谈。&lt;/li>
&lt;li>估算你的算法的阶 Estimate the Order of Your Algorithms 在你编写代码之前，先大致估算事情需要多长时间。&lt;/li>
&lt;li>测试你的估算 Test Your Estimates 对算法的数学分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。&lt;/li>
&lt;li>早重构，常重构 Refactor Early, Refactor Often 就和你会在花园里除草、并重新布置一样，在需要时对代码进行重写、重做和重新架构。要铲除问题的根源。&lt;/li>
&lt;li>为测试而设计 Design to Test 在你还没有编写代码时就开始思考测试问题。&lt;/li>
&lt;li>测试你的软件，否则你的用户就得测试 Test Your Software, or Your Users Will 无情地测试。不要让你的用户为你查找 bug。&lt;/li>
&lt;li>不要使用你不理解的向导代码 Don&amp;rsquo;t Use Wizard Code You Don&amp;rsquo;t Understand 向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部这些代码。&lt;/li>
&lt;li>不要搜集需求——挖掘它们 Don&amp;rsquo;t Gather Requirements-Dig for Them 需求很少存在于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。&lt;/li>
&lt;li>与用户一同工作，以像用户一样思考 Work with a User to Think Like a User 要了解系统实际上将如何被使用，这是最好的方法。&lt;/li>
&lt;li>抽象比细节活得更长久 Abstractions Live Longer than Details 「投资」于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的「攻击」之下存活下去。&lt;/li>
&lt;li>使用项目词汇表 Use a Project Glossary 创建并维护项目中使用的专用术语和词汇的单一信息源。&lt;/li>
&lt;li>不要在盒子外面思考——要找到盒子 Don&amp;rsquo;t Think Outside the Box-Find the Box 在遇到不可能解决的问题时，要确定真正的约束。问问你自己：「它必须以这种方式完成吗？它真的必须完成吗？」&lt;/li>
&lt;li>等你准备好再开始 Start When You&amp;rsquo;re Ready 你的一生都在积累经验。不要忽视反复出现的疑虑。&lt;/li>
&lt;li>对有些事情「做」胜于「描述」Some Things Are Better Done than Described 不要掉进规范的螺旋——在某个时刻，你需要开始编码。&lt;/li>
&lt;li>不要做形式方法的奴隶 Don&amp;rsquo;t Be a Slave to Formal Methods 如果你没有把某项技术放进你的开发实践和能力的语境中，不要盲目地采用它。&lt;/li>
&lt;li>昂贵的工具不一定能制作出更好的设计 Costly Tools Don&amp;rsquo;t Produce Better Designs 小心供应商的炒作，行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。&lt;/li>
&lt;li>围绕功能组织团队 Organize Teams Around Functionality 不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。&lt;/li>
&lt;li>不要使用手工流程 Don&amp;rsquo;t Use Manual Procedures shell 脚本或批文件会一次次地以同一顺序执行同样的指令。&lt;/li>
&lt;li>早测试，常测试，自动测试。Test Early. Test Often. Test Automatically 与呆在书架上的测试计划相比，每次构建时运行的测试要有效得多。&lt;/li>
&lt;li>要到通过全部测试，编码才算完成 Coding Ain’t Done‘Til All the Tests Run 就是这样。&lt;/li>
&lt;li>通过「蓄意破坏」测试你的测试 Use Saboteurs to Test Your Testing 在单独的软件副本上故意引入 bug，以检验测试能够抓住它们。&lt;/li>
&lt;li>测试状态覆盖，而不是代码覆盖 Test State Coverage, Not Code Coverage 确定并测试重要的程序状态。只是测试代码行是不够的。&lt;/li>
&lt;li>一个 bug 只抓一次 Find Bugs Once 一旦测试员找到一个 bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。&lt;/li>
&lt;li>英语就是一种编程语言 English is Just a Programming Language 像你编写代码一样编写文档：遵守 DRY 原则、使用元数据、MVC、自动生成，等等。&lt;/li>
&lt;li>把文档建在里面，不要拴在外面 Build Documentation In, Don&amp;rsquo;t Bolt It On 与代码分离的文档不太可能被修正和更新。&lt;/li>
&lt;li>温和地超出用户的期望 Gently Exceed Your Users&amp;rsquo; Expectations 要理解你的用户的期望，然后给他们的东西要多那么一点。&lt;/li>
&lt;li>在你的作品上签名 Sign Your Work 过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。&lt;/li>
&lt;/ol>
&lt;h2 id="测试的各个方面">测试的各个方面
&lt;/h2>&lt;ul>
&lt;li>单元测试&lt;/li>
&lt;li>集成测试&lt;/li>
&lt;li>验证和校验&lt;/li>
&lt;li>资源耗尽、错误及恢复&lt;/li>
&lt;li>性能测试&lt;/li>
&lt;li>可用性测试&lt;/li>
&lt;li>对测试自身进行测试&lt;/li>
&lt;/ul>
&lt;h2 id="劈开戈尔迪斯结在解决不可能解决的问题时问问你自己">劈开戈尔迪斯结，在解决不可能解决的问题时，问问你自己：
&lt;/h2>&lt;ul>
&lt;li>有更容易的方法吗？&lt;/li>
&lt;li>我是在解决正确的问题吗？&lt;/li>
&lt;li>这件事情为什么是一个问题？&lt;/li>
&lt;li>是什么使它如此难以解决？&lt;/li>
&lt;li>它必须以这种方式完成吗？&lt;/li>
&lt;li>它真的必须完成吗？&lt;/li>
&lt;/ul>
&lt;h2 id="何时进行重构">何时进行重构？
&lt;/h2>&lt;ul>
&lt;li>你发现了对 DRY 原则的违反。&lt;/li>
&lt;li>你发现事物可以更为正交。&lt;/li>
&lt;li>你的知识扩展了。&lt;/li>
&lt;li>需求演变了。&lt;/li>
&lt;li>你需要改善性能。&lt;/li>
&lt;/ul>
&lt;h2 id="怎样深思熟虑地编程">怎样深思熟虑地编程？
&lt;/h2>&lt;ul>
&lt;li>总是意识到你在做什么。&lt;/li>
&lt;li>不要盲目地编程。&lt;/li>
&lt;li>按照计划行事&lt;/li>
&lt;li>依靠可靠的事物。&lt;/li>
&lt;li>为你的假定建立文档&lt;/li>
&lt;li>不要只是测试你的代码，还要测试你的假定。&lt;/li>
&lt;li>为你的工作划分优先级。&lt;/li>
&lt;li>不要做历史的奴隶。&lt;/li>
&lt;/ul>
&lt;h2 id="函数的得墨忒耳法则某个对象的方法应该只调用属于以下情形的方法">函数的得墨忒耳法则，某个对象的方法应该只调用属于以下情形的方法：
&lt;/h2>&lt;ul>
&lt;li>它自身&lt;/li>
&lt;li>传入的任何参数&lt;/li>
&lt;li>它创建的对象&lt;/li>
&lt;li>组件对象&lt;/li>
&lt;/ul>
&lt;h2 id="调试检查清单">调试检查清单
&lt;/h2>&lt;ul>
&lt;li>正在报告的问题是底层 bug 的直接结果，还是只是症状？&lt;/li>
&lt;li>bug 真的在编译器里？在 OS 里？或者是在你的代码里？&lt;/li>
&lt;li>如果你向同事详细解释这个问题，你会说什么？&lt;/li>
&lt;li>如果可疑代码通过了单元测试，测试是否足够完整？如果你用该数据运行单元测试，会发生什么？&lt;/li>
&lt;li>造成这个 bug 的条件是否存在于系统中的其他任何地方？&lt;/li>
&lt;/ul>
&lt;h2 id="应制作原型的事物">应制作原型的事物
&lt;/h2>&lt;ul>
&lt;li>架构&lt;/li>
&lt;li>已有系统中的新功能&lt;/li>
&lt;li>外部数据的结构或内容&lt;/li>
&lt;li>第三方工具或组件&lt;/li>
&lt;li>性能问题&lt;/li>
&lt;li>用户界面设计&lt;/li>
&lt;/ul>
&lt;h2 id="架构问题">架构问题
&lt;/h2>&lt;ul>
&lt;li>责任是否得到了良好定义？&lt;/li>
&lt;li>协作是否得到了良好定义？&lt;/li>
&lt;li>耦合是否得以最小化？&lt;/li>
&lt;li>你能否确定潜在的重复？&lt;/li>
&lt;li>接口定义和各项约束是否可接受？&lt;/li>
&lt;li>模块能否在需要时访问所需数据？&lt;/li>
&lt;/ul>
&lt;h2 id="怎样维持正交性">怎样维持正交性？
&lt;/h2>&lt;ul>
&lt;li>设计独立、良好定义的组件。&lt;/li>
&lt;li>使你的代码保持解藕。&lt;/li>
&lt;li>避免使用全局数据。&lt;/li>
&lt;li>重构相似的函数。&lt;/li>
&lt;/ul></description></item><item><title>《Software Engineering at Google》 摘要 01：软件工程是什么？</title><link>https://andornot.xyz/posts/software-engineering-at-google-note-01/</link><pubDate>Thu, 08 Sep 2022 22:12:10 +0800</pubDate><guid>https://andornot.xyz/posts/software-engineering-at-google-note-01/</guid><description>&lt;img src="https://andornot.xyz/software-engineering-at-google-note-01-cover.png" alt="Featured image of post 《Software Engineering at Google》 摘要 01：软件工程是什么？" />&lt;p>&lt;strong>该文章为笔者读 &lt;a class="link" href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Chapter-1_What_Is_Software_Engineering/Chapter-1_What_Is_Software_Engineering" target="_blank" rel="noopener"
>Software Engineering at Google&lt;/a> 时所记摘要，录以备考假以时日待作感悟。&lt;/strong>&lt;/p>
&lt;p>软件工程可以被认为是 &lt;strong>「随着时间推移而整合的编程」&lt;/strong>。&lt;/p>
&lt;p>本书强调了三个基本原则，我们认为软件组织在设计、架构和编写代码时应该牢记这些原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>时间和变化&lt;/strong> ​ 代码如何展期生命周期内进行适配。&lt;/li>
&lt;li>&lt;strong>规模和增长&lt;/strong> ​ 一个组织如何适应它的发展过程。&lt;/li>
&lt;li>&lt;strong>权衡和成本&lt;/strong> ​ 一个组织如何根据时间和变化以及规模和增长的经验教训做出决策。
编程和软件工程之间有三个关键的区别：时间、规模和权衡取舍。&lt;/li>
&lt;/ul>
&lt;p>在一个软件工程项目中，工程师需要更多关注时间成本和需求变更。在软件工程中，我们需要更加关注规模和效率，无论是对我们生产的软件，还是对生产软件的组织。最后，作为软件工程师，我们被要求做出更复杂的决策，其结果风险更大，而且往往是基于对时间和规模增长的不确定性的预估。&lt;/p>
&lt;p>了解时间对程序的影响的一种方法是思考「代码的预期生命周期是多少？」&lt;/p>
&lt;ul>
&lt;li>通常，周期短的代码不受时间的影响。对于一个只需要存活一个小时的程序，你不太可能考虑其适应基础库、操作系统（OS）、硬件或语言版本的新版本。这些短期系统实际上“只是”一个编程问题，就像在一个维度中压缩得足够扁的立方体是正方形一样。随着我们扩大时间维度，允许更长的生命周期，改变显得更加重要。在十年或更长的时间里，大多数程序依赖关系，无论是隐式的还是显式的，都可能发生变化。这一认识是我们区分软件工程和编程的根本原因。&lt;/li>
&lt;li>如果在软件的预期生命周期内，你能够对任何有价值的变化做出反应，无论是技术还是商业原因，那么你的项目是可持续的。重要的是，我们只关注能力——你可能因为缺乏价值或其他优先事项而选择不进行特定的升级。当你基本上无法对基础技术或产品方向的变化做出反应时，你就把高风险赌注押在希望这种变化永远不会变得至关重要。对于短期项目，这可能是一个安全的赌注。几十年后，情况可能并非如此。&lt;/li>
&lt;/ul>
&lt;p>另一种看待软件工程的方法是考虑规模。有多少人参与？随着时间的推移，他们在开发和维护中扮演什么角色？&lt;/p>
&lt;p>团队协作带来了新的问题，但也提供了比任何单个程序员更多的潜力来产生有价值的系统。&lt;/p>
&lt;p>软件工程与编程的不同之处在于需要做出的决策的复杂性及其风险。在软件工程中，我们经常被迫在几个路径之间做评估和权衡，有时风险很高，而且价值指标不完善。软件工程师或软件工程负责人的工作目标是实现组织、产品和开发工作流程的可持续性和管理扩展成本为目标。考虑到这些投入，评估你的权衡并做出理性的决定。有时，我们可能会推迟维护更改，甚至接受扩展性不好的策略，因为我们知道需要重新审视这些决策。这些决策应该是明确的和清晰的递延成本。&lt;/p>
&lt;p>&lt;strong>Hyrum&amp;rsquo;s Law 海勒姆定律&lt;/strong>：「当一个 API 有足够多的用户的时候，在约定中你承诺的什么都无所谓，所有在你系统里面被观察到的行为都会被一些用户直接依赖。」&lt;/p>
&lt;p>对随时间变化和维护的讨论必须了解海勒姆定律，正如对效率或热力学的讨论必须注意熵一样。仅仅因为熵从不减少并不意味着我们不应该努力提高效率。在维护软件时，海勒姆定律会适用，但这并不意味着我们不能对它进行规划或试图更好地了解它。我们可以减轻它，但我们知道，它永远不可能被根除。
海勒姆定律代表了一种实践知识，即使有最好的规划、最好的工程师和可靠的代码评审实践，我们也不能假设完全遵守已发布的契约或最佳实践。作为 API 所有者，通过明确地接口约定，你将获得一定的灵活性和自由度，但在实践中，给定更改的复杂性和难度还取决于用户对你的 API 的一些可观察行为的有用程度。如果用户不能依赖这些东西，那么你的 API 将很容易更改。如果有足够的时间和足够的用户，即使是最无害的变更也会破坏某些东西；你对变更价值的分析必须包含调查、识别和解决这些缺陷的难度。&lt;/p>
&lt;p>依赖其依赖性的脆弱和未发布特性的代码可能被描述为「黑客」或「聪明」遵循最佳实践并为未来规划的代码更可能被描述为「干净」和「可维护」。两者都有其目的，但你选择哪一个关键取决于所讨论代码的预期生命周期。我们常说，「如果『聪明』是一种恭维，那就是程序，如果『聪明』是一种指责，那就是软件工程。」&lt;/p>
&lt;p>最初的设计可能完全符合逻辑，并遵循合理的最佳实践。只有在向后兼容的变化演变之后，新的、更有效的选择才变得重要。虽然没有犯错误，但随着时间的推移，变化仍然是有价值的。&lt;/p>
&lt;p>我们的工程师的工作量是否随着组织的规模而增长？工作是否随着代码库的大小而变多？如果这两种情况都是真实的，我们是否有机制来自动化或优化这项工作？如果没有，我们就有扩展问题。
自动化（这样一个人就可以做到更多）、整合/一致性（这样低级别的更改影响有限的问题范围）和专业知识（以便少数人就可以做得更多）。&lt;/p>
&lt;p>如果安全问题是在产品投入生产后才发现的，修复的成本就非常高。如果在部署到生产之前就发现了安全问题，那也需要花费大量的工作来检测和修复问题，但成本更低些。如果你能够在最初的开发之前发现安全问题，将缺陷提交到版本控制就被发现，修复的成本更低：他们已经了解该功能；根据新的安全约束规范进行开发，要比提交代码后再让其他人分类标识并修复它更简单。&lt;/p>
&lt;p>我们看到的一个普遍真理是，在开发人员的工作流程中发现的问题，通常可以降低成本。考虑开发人员工作流程的时间表，从左到右，从概念和设计开始，通过实施、评审、测试、提交、金丝雀和最终的生产部署来进行。在此时间线之前，将问题发现转移到“左侧”会使修问题解决成本更低&lt;/p>
&lt;p>“成本”大致可以转化为努力的方向，可以包括以下任何或所有因素：&lt;/p>
&lt;ul>
&lt;li>财务成本（如金钱）&lt;/li>
&lt;li>资源成本（如 CPU 时间）&lt;/li>
&lt;li>人员成本（例如，工作量）&lt;/li>
&lt;li>交易成本（例如，采取行动的成本是多少？）&lt;/li>
&lt;li>机会成本（例如，不采取行动的成本是多少？）&lt;/li>
&lt;li>社会成本（例如，这个选择将对整个社会产生什么影响？）&lt;/li>
&lt;/ul>
&lt;p>工程团队的决策应该归结为几件事：我们这样做是因为我们必须这么做（法律要求、客户要求）。我们之所以这样做，是因为根据当前证据，这是我们当时能看到的最佳选择（由一些适当的决策者决策）。&lt;/p>
&lt;p>&lt;strong>杰文斯悖论（Jevons Paradox）&lt;/strong>：「一种资源的消耗可能会随着使用效率的提高而增加。」&lt;/p>
&lt;p>时间不仅会触发技术依赖和软件系统的变化，还会触发用于驱动决策的数据的变化。&lt;/p>
&lt;p>本质上，在相关系统的生命周期内，需要不时地重新审视决策。对于长期项目而言，在做出初始决策后，有能力改变方向通常是至关重要的。更重要的是，这意味着决策者需要勇气承认错误。与人的本能相反，勇于承认错误的领导人受更多的尊重。&lt;/p>
&lt;p>我们认为，区分相关但不同的术语「编程」和「软件工程」是很重要的。这种差异很大程度上源于随着时间的推移对代码的管理、时间对规模的影响以及面对这些想法的决策。编程是产生代码的直接行为。软件工程是一组策略、实践和工具，这些策略、实践和工具是使代码在需要使用的时间内发挥作用，并允许整个团队的协作。&lt;/p></description></item></channel></rss>