<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AnDorN0T</title>
  <icon>https://www.gravatar.com/avatar/a2ef0e024c19fdc0ac9c6ad82eccac1a</icon>
  <subtitle>Dirty Deeds Done Dirt Cheap</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://andornot.xyz/"/>
  <updated>2020-07-23T17:36:06.116Z</updated>
  <id>https://andornot.xyz/</id>
  
  <author>
    <name>igaozp</name>
    <email>metamoon@protonmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows Terminal 简易配置参考</title>
    <link href="https://andornot.xyz/2020/01/08/windows-terminal-config/"/>
    <id>https://andornot.xyz/2020/01/08/windows-terminal-config/</id>
    <published>2020-01-08T21:13:51.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p><code>Windows Terminal</code> 为 <code>Windows</code> 平台提供了高质量、可自定义的控制终端，但默认情况下 <code>Windows Terminal</code> 使用了非常简陋的配置且缺乏相关配置参考。<br>本文提供了一个相对可用且较为美观的终端配置，读者可参考此配置进行深度的自定义。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span><br><span class="line">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"$schema"</span>: <span class="string">"https://aka.ms/terminal-profiles-schema"</span>,</span><br><span class="line">    <span class="attr">"alwaysShowTabs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"defaultProfile"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">    <span class="attr">"initialCols"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"initialRows"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"requestedTheme"</span>: <span class="string">"system"</span>,</span><br><span class="line">    <span class="attr">"showTabsInTitlebar"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"showTerminalTitleInTitlebar"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"wordDelimiters"</span>: <span class="string">" /\\()\"'-.,:;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;~?\u2502"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"profiles"</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"guid"</span>: <span class="string">"&#123;59ad8b0c-3ef8-5f4d-bc6f-13e4c00f2530&#125;"</span>,</span><br><span class="line">            <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debian"</span>,</span><br><span class="line">            <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.Wsl"</span>,</span><br><span class="line">            <span class="attr">"startingDirectory"</span>: <span class="string">"%USERPROFILE%"</span>,</span><br><span class="line">            <span class="attr">"closeOnExit"</span>: <span class="literal">true</span>,</span><br><span class="line">            "colorScheme": "One Half Dark", // 自定义主题</span><br><span class="line">            "cursorColor": "#FFFFFF",</span><br><span class="line">            "cursorShape": "bar",</span><br><span class="line">            "fontFace": "Sarasa Term SC", // 自定义字体</span><br><span class="line">            "fontSize": 12,</span><br><span class="line">            "historySize": 9001,</span><br><span class="line">            "padding": "8, 8, 8, 8",</span><br><span class="line">            "snapOnInput": true,</span><br><span class="line">            "useAcrylic": false // 亚克力效果关闭，开启会更美观但会消耗更多性能</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"guid"</span>: <span class="string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,</span><br><span class="line">            "hidden": true, // 隐藏暂时不用的终端</span><br><span class="line">            "name": "Azure Cloud Shell",</span><br><span class="line">            "source": "Windows.Terminal.Azure"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"guid"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Windows PowerShell"</span>,</span><br><span class="line">            <span class="attr">"commandline"</span>: <span class="string">"powershell.exe"</span>,</span><br><span class="line">            <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"startingDirectory"</span>: <span class="string">"%USERPROFILE%"</span>,</span><br><span class="line">            <span class="attr">"closeOnExit"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"colorScheme"</span>: <span class="string">"One Half Dark"</span>,</span><br><span class="line">            <span class="attr">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line">            <span class="attr">"cursorShape"</span>: <span class="string">"bar"</span>,</span><br><span class="line">            <span class="attr">"fontFace"</span>: <span class="string">"Sarasa Term SC"</span>,</span><br><span class="line">            <span class="attr">"fontSize"</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line">            <span class="attr">"icon"</span>: <span class="string">"ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png"</span>,</span><br><span class="line">            <span class="attr">"padding"</span>: <span class="string">"8, 8, 8, 8"</span>,</span><br><span class="line">            <span class="attr">"snapOnInput"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"useAcrylic"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"guid"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"cmd"</span>,</span><br><span class="line">            <span class="attr">"commandline"</span>: <span class="string">"cmd.exe"</span>,</span><br><span class="line">            <span class="attr">"hidden"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"startingDirectory"</span>: <span class="string">"%USERPROFILE%"</span>,</span><br><span class="line">            <span class="attr">"closeOnExit"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"colorScheme"</span>: <span class="string">"Campbell"</span>,</span><br><span class="line">            <span class="attr">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line">            <span class="attr">"cursorShape"</span>: <span class="string">"bar"</span>,</span><br><span class="line">            <span class="attr">"fontFace"</span>: <span class="string">"Consolas"</span>,</span><br><span class="line">            <span class="attr">"fontSize"</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line">            <span class="attr">"icon"</span>: <span class="string">"ms-appx:///ProfileIcons/&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;.png"</span>,</span><br><span class="line">            <span class="attr">"padding"</span>: <span class="string">"8, 8, 8, 8"</span>,</span><br><span class="line">            <span class="attr">"snapOnInput"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"useAcrylic"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    // Add custom color schemes to this array 主题配置</span><br><span class="line">    "schemes":     [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Campbell"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#C50F1F"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#13A10E"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#C19C00"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#0037DA"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#881798"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#3A96DD"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#767676"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#E74856"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#16C60C"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#F9F1A5"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#3B78FF"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#B4009E"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#61D6D6"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#F2F2F2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Campbell Powershell"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#012456"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#C50F1F"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#13A10E"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#C19C00"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#0037DA"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#881798"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#3A96DD"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#767676"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#E74856"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#16C60C"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#F9F1A5"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#3B78FF"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#B4009E"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#61D6D6"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#F2F2F2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Vintage"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#C0C0C0"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#800000"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#008000"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#808000"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#000080"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#800080"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#008080"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#C0C0C0"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#808080"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#FF0000"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#00FF00"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#FFFF00"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#0000FF"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#FF00FF"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#00FFFF"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#FFFFFF"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"One Half Dark"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#DCDFE4"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#282C34"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#282C34"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#E06C75"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#98C379"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#E5C07B"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#61AFEF"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#C678DD"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#56B6C2"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#DCDFE4"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#5A6374"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#E06C75"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#98C379"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#E5C07B"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#61AFEF"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#C678DD"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#56B6C2"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#DCDFE4"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"One Half Light"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#383A42"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#FAFAFA"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#383A42"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#E45649"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#50A14F"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#C18301"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#0184BC"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#A626A4"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#0997B3"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#FAFAFA"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#4F525D"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#DF6C75"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#98C379"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#E4C07A"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#61AFEF"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#C577DD"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#56B5C1"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#FFFFFF"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Solarized Dark"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#839496"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#002B36"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#073642"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#DC322F"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#859900"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#B58900"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#268BD2"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#D33682"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#2AA198"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#EEE8D5"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#002B36"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#CB4B16"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#586E75"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#657B83"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#839496"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#6C71C4"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#93A1A1"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#FDF6E3"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Solarized Light"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#657B83"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#FDF6E3"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#073642"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#DC322F"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#859900"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#B58900"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#268BD2"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#D33682"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#2AA198"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#EEE8D5"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#002B36"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#CB4B16"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#586E75"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#657B83"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#839496"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#6C71C4"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#93A1A1"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#FDF6E3"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    // Add any keybinding overrides to this array.</span><br><span class="line">    // To unbind a default keybinding, set the command to "unbound"</span><br><span class="line">    "keybindings": [</span><br><span class="line">        &#123; "command": "closePane", "keys": ["ctrl+shift+w"] &#125;,</span><br><span class="line">        &#123; "command": "closeWindow", "keys": ["alt+f4"] &#125;,</span><br><span class="line">        &#123; "command": "copy", "keys": ["ctrl+shift+c"] &#125;,</span><br><span class="line">        &#123; "command": "duplicateTab", "keys": ["ctrl+shift+d"] &#125;,</span><br><span class="line">        &#123; "command": "newTab", "keys": ["ctrl+shift+t"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile0", "keys": ["ctrl+shift+1"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile1", "keys": ["ctrl+shift+2"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile2", "keys": ["ctrl+shift+3"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile3", "keys": ["ctrl+shift+4"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile4", "keys": ["ctrl+shift+5"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile5", "keys": ["ctrl+shift+6"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile6", "keys": ["ctrl+shift+7"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile7", "keys": ["ctrl+shift+8"] &#125;,</span><br><span class="line">        &#123; "command": "newTabProfile8", "keys": ["ctrl+shift+9"] &#125;,</span><br><span class="line">        &#123; "command": "nextTab", "keys": ["ctrl+tab"] &#125;,</span><br><span class="line">        &#123; "command": "openNewTabDropdown", "keys": ["ctrl+shift+space"] &#125;,</span><br><span class="line">        &#123; "command": "openSettings", "keys": ["ctrl+,"] &#125;,</span><br><span class="line">        &#123; "command": "paste", "keys": ["ctrl+shift+v"] &#125;,</span><br><span class="line">        &#123; "command": "prevTab", "keys": ["ctrl+shift+tab"] &#125;,</span><br><span class="line">        &#123; "command": "scrollDown", "keys": ["ctrl+shift+down"] &#125;,</span><br><span class="line">        &#123; "command": "scrollDownPage", "keys": ["ctrl+shift+pgdn"] &#125;,</span><br><span class="line">        &#123; "command": "scrollUp", "keys": ["ctrl+shift+up"] &#125;,</span><br><span class="line">        &#123; "command": "scrollUpPage", "keys": ["ctrl+shift+pgup"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab0", "keys": ["ctrl+alt+1"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab1", "keys": ["ctrl+alt+2"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab2", "keys": ["ctrl+alt+3"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab3", "keys": ["ctrl+alt+4"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab4", "keys": ["ctrl+alt+5"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab5", "keys": ["ctrl+alt+6"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab6", "keys": ["ctrl+alt+7"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab7", "keys": ["ctrl+alt+8"] &#125;,</span><br><span class="line">        &#123; "command": "switchToTab8", "keys": ["ctrl+alt+9"] &#125;,</span><br><span class="line">        &#123; "command": "decreaseFontSize", "keys": ["ctrl+-"] &#125;,</span><br><span class="line">        &#123; <span class="attr">"command"</span>: <span class="string">"increaseFontSize"</span>, <span class="attr">"keys"</span>: [<span class="string">"ctrl+="</span>] &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Windows Terminal&lt;/code&gt; 为 &lt;code&gt;Windows&lt;/code&gt; 平台提供了高质量、可自定义的控制终端，但默认情况下 &lt;code&gt;Windows Terminal&lt;/code&gt; 使用了非常简陋的配置且缺乏相关配置参考。&lt;br&gt;本文提供
      
    
    </summary>
    
    
    
      <category term="Windows Terminal" scheme="https://andornot.xyz/tags/Windows-Terminal/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains Tips - 使用 File Watchers 自动压缩 CSS</title>
    <link href="https://andornot.xyz/2019/11/17/file-watchers-compressor-css/"/>
    <id>https://andornot.xyz/2019/11/17/file-watchers-compressor-css/</id>
    <published>2019-11-17T16:13:51.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>File Watchers</strong> 功能（该功能只在 <strong>Ultimate edition</strong> 中提供）是 <strong>JetBrains</strong> 系列软件中内建的自动化文件处理工具，在文件保存时自动执行诸如文件格式化、编译等操作。</p><p>通过 <strong>File Watchers</strong> 功能可以实现修改 <code>CSS</code> 时自动生成相应的压缩后的 <code>CSS</code> 文件。想要实现此功能还需要额外下载 <strong>YUI Compressor</strong> 的 JAR 文件，从<a href="http://yui.github.io/yuicompressor/" target="_blank" rel="noopener">官网</a>下载即可。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>在 <strong>File Watchers</strong> 点击添加，选择 <strong>YUI Compressor CSS</strong> 模板，并在 <strong>Program</strong> 选项中选择下载的 <strong>YUI Compressor JAR</strong> 文件，保存后即可使用。此操作在 <strong>WebStorm</strong> 中演示，其他系列软件操作选项可能存在出入。</p><p>参考如下<br><img src="https://user-images.githubusercontent.com/11324788/69004858-9599aa00-0954-11ea-9fd5-41e56bf43381.png" alt="JetBrains File Watchers"><br><img src="https://user-images.githubusercontent.com/11324788/69004859-9a5e5e00-0954-11ea-8d0b-8c0457b4acf7.png" alt="YUI Compressor Config"><br>除了实现 CSS 自动压缩功能，File Wachers 还提供了其他诸如代码美化等功能，本文不再赘述，感兴趣的可自行参考官方文档进行配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;File Watchers&lt;/strong&gt; 功能（该功能只在 &lt;strong&gt;Ultimate edition&lt;/stro
      
    
    </summary>
    
    
    
      <category term="JetBrains" scheme="https://andornot.xyz/tags/JetBrains/"/>
    
      <category term="CSS" scheme="https://andornot.xyz/tags/CSS/"/>
    
      <category term="奇技淫巧" scheme="https://andornot.xyz/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 之创建和销毁对象</title>
    <link href="https://andornot.xyz/2018/07/06/effective-java-object-create-destory/"/>
    <id>https://andornot.xyz/2018/07/06/effective-java-object-create-destory/</id>
    <published>2018-07-06T10:48:51.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="考虑使用静态工厂方法替代构造器"><a href="#考虑使用静态工厂方法替代构造器" class="headerlink" title="考虑使用静态工厂方法替代构造器"></a>考虑使用静态工厂方法替代构造器</h3><p>一个简单的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String objectId;</span><br><span class="line">    <span class="comment">//私有构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Foo</span><span class="params">(String objectId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectId = objectId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Foo <span class="title">newInstance</span><span class="params">(String objectId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo(objectId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="这样做的优点"><a href="#这样做的优点" class="headerlink" title="这样做的优点"></a>这样做的优点</h4><ul><li>静态工厂方法可以自定义名字，这样使用起来比起默认的构造器更加直观</li><li>静态工厂方法获取实例可以不需要生成一个新对象，不必在每次调用的时候都创建一个新的对象，可以使用预先构建好的实例，从而避免不必要的重复对象</li><li>静态工厂方法可以返回原返回类型的子类型对象，通过隐藏实现类使 API 更加简洁</li></ul><h4 id="主要的缺点"><a href="#主要的缺点" class="headerlink" title="主要的缺点"></a>主要的缺点</h4><ul><li>类如果没有公有的或者是受保护的构造器，就不能被子类化（被继承）</li><li>容易与其他静态方法混淆，导致想要查明一个类该如何被实例化十分困难</li></ul><h3 id="遇到多个构造器参数时要考虑使用构建器"><a href="#遇到多个构造器参数时要考虑使用构建器" class="headerlink" title="遇到多个构造器参数时要考虑使用构建器"></a>遇到多个构造器参数时要考虑使用构建器</h3><p>设想一下一个类有许多的属性，这些属性需要使用构造方法初始化，大量的构造方法可能会造成代码的可读性下降。如果使用 <code>JavaBeans</code> 模式，通过 <code>set</code> 方法初始化相应的属性，可能会导致对象实例处于不一致的状态，无法保证线程安全。</p><p>这样就产生了一种替代方法，通过 <code>Builder 模式</code> 不直接生成对象，而是利用必要的参数调用构造器，得到一个 builder 对象，通过 builder 对象设置可选参数，最后调用无参的 build 的方法生成不可变对象。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 必要参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            thus.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>,<span class="number">8</span>).calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br></pre></td></tr></table></figure><h3 id="使用私有构造器或者枚举类型强化-Singleton-属性"><a href="#使用私有构造器或者枚举类型强化-Singleton-属性" class="headerlink" title="使用私有构造器或者枚举类型强化 Singleton 属性"></a>使用私有构造器或者枚举类型强化 Singleton 属性</h3><p><code>Singleton</code> 是指仅实例化一次的类，有多种方式实现 Singleton 类</p><ul><li>通过将构造方法设置为私有，用静态 final 变量来表示唯一的实例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过设置静态工厂方法，每一次调用都返回同一个实例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个包含单个元素的枚举类型，更加简洁，并且提供了序列化机制：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过私有构造器强化不可变实例化的能力"><a href="#通过私有构造器强化不可变实例化的能力" class="headerlink" title="通过私有构造器强化不可变实例化的能力"></a>通过私有构造器强化不可变实例化的能力</h3><p>通常有一些工具类没有实例化的必要，只是使用类的静态函数或者变量，可以将类的构造器设置为 <code>private</code>来避免类的实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h3><p>避免创建不必要的对象，尽量重用已有的对象，避免重复创建对象产生的开支，可以使用静态工厂方法来实现对相关对象的重用。优先使用基本类型，避免因自动装箱而产生性能开支。</p><h3 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h3><p>Java 虽然不像 C++ 那样需要程序员手动管理内存，但是垃圾回收机制并不是那么智能，对于被引用的对象，就算我们已经不在使用，但是 Java 的回收机制是不会回收它们的，无意识的引用造成了 “内存泄漏”。这就需要我们手动去消除过期的对象引用，最为常用的方法将不再使用的对象设置为 <code>null</code>。</p><h3 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h3><p>C++ 的类中存在析构函数，当类的实例销毁时就会执行析构函数，Java 中也存在类似的机制那就是终结方法<code>finalize()</code>，但终结方法并不能保证会被及时的执行，因此导致终结方法失去了一定的实际意义。例如数据库连接的关闭、数据流的关闭等操作可以使用 <code>try-finally</code> 语句来代替。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;考虑使用静态工厂方法替代构造器&quot;&gt;&lt;a href=&quot;#考虑使用静态工厂方法替代构造器&quot; class=&quot;headerlink&quot; title=&quot;考虑使用静态工厂方法替代构造器&quot;&gt;&lt;/a&gt;考虑使用静态工厂方法替代构造器&lt;/h3&gt;&lt;p&gt;一个简单的示例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String objectId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String objectId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.objectId = objectId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//静态工厂方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Foo &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String objectId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(objectId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>修改 Vue.js 项目默认的端口</title>
    <link href="https://andornot.xyz/2018/05/22/vue-change-default-port/"/>
    <id>https://andornot.xyz/2018/05/22/vue-change-default-port/</id>
    <published>2018-05-22T10:59:45.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>vue-cli</code> 构建 Vue.js 项目时，项目的默认端口被设为 8080，可能会与其他的服务端口产生冲突，可以在项目根目录下的 <code>config</code> 文件中的 <code>index.js</code> 文件中进行修改，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;  </span><br><span class="line">  env: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),  </span><br><span class="line">  port: <span class="number">4000</span>,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 &lt;code&gt;vue-cli&lt;/code&gt; 构建 Vue.js 项目时，项目的默认端口被设为 8080，可能会与其他的服务端口产生冲突，可以在项目根目录下的 &lt;code&gt;config&lt;/code&gt; 文件中的 &lt;code&gt;index.js&lt;/code&gt; 文件中进行修改，例
      
    
    </summary>
    
    
    
      <category term="Vue.js" scheme="https://andornot.xyz/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Java 10 局部变量类型推断</title>
    <link href="https://andornot.xyz/2018/04/01/java-10-var-keyword/"/>
    <id>https://andornot.xyz/2018/04/01/java-10-var-keyword/</id>
    <published>2018-04-01T10:38:59.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>Java 10 引入了 <code>var</code> 保留类型来实现局部变量推断。为了兼容旧版本，<code>var</code> 不是关键字，而是一个保留类型，仍然可以使用 <code>var</code> 作为为变量和函数名。</p><p>与 JavaScript 不同，使用 var 修饰的变量仍然是静态类型，并不是与 JavaScript 类似的动态类型，变量的类型在编译期已经确定，不能像动态类型语言一样在运行时随意改变变量的类型，所以 <code>var</code> 的引入使代码更加简洁易读。</p><a id="more"></a><p>我们可以写出这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">var</span> map = Map.of(<span class="number">1</span>, <span class="string">"a"</span>, <span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> entry: map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>var</code> 声明的变量时必须要在声明的同时初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// error: 'var' on variable without initializer</span></span><br><span class="line">a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>同时 <code>var</code> 不能用于局部变量声明以外的地方，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVariableTypeInference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>; <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalVariableTypeInference</span><span class="params">(<span class="keyword">var</span> i)</span> </span>&#123; <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">var</span> e) &#123; <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">var</span> <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不能使用 <code>var</code> 将变量初始化为 <code>null</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 10 引入了 &lt;code&gt;var&lt;/code&gt; 保留类型来实现局部变量推断。为了兼容旧版本，&lt;code&gt;var&lt;/code&gt; 不是关键字，而是一个保留类型，仍然可以使用 &lt;code&gt;var&lt;/code&gt; 作为为变量和函数名。&lt;/p&gt;
&lt;p&gt;与 JavaScript 不同，使用 var 修饰的变量仍然是静态类型，并不是与 JavaScript 类似的动态类型，变量的类型在编译期已经确定，不能像动态类型语言一样在运行时随意改变变量的类型，所以 &lt;code&gt;var&lt;/code&gt; 的引入使代码更加简洁易读。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux 开启 TCP BBR 拥塞控制算法</title>
    <link href="https://andornot.xyz/2018/01/01/linux-enable-tcp-bbr/"/>
    <id>https://andornot.xyz/2018/01/01/linux-enable-tcp-bbr/</id>
    <published>2018-01-01T10:33:27.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>要想开启 TCP BBR，需要 Linux kernel 4.9+ ，如果内核版本过低的话需要升级内核，本教程以 Ubuntu 系统为例。</p><a id="more"></a><h3 id="开启-TCP-BBR"><a href="#开启-TCP-BBR" class="headerlink" title="开启 TCP BBR"></a>开启 TCP BBR</h3><p>执行 <code>lsmod | grep bbr</code>，如果结果中没有 <code>tcp_bbr</code> 的话就先执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"tcp_bbr"</span> &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>保存生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>如果结果都有 <code>bbr</code>， 则证明你的内核已开启 <code>bbr</code><br>执行 <code>lsmod | grep bbr</code>， 看到有 <code>tcp_bbr</code> 模块即说明 <code>bbr</code> 已启动</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;要想开启 TCP BBR，需要 Linux kernel 4.9+ ，如果内核版本过低的话需要升级内核，本教程以 Ubuntu 系统为例。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://andornot.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Go 生成二维 slice 的一种方法</title>
    <link href="https://andornot.xyz/2017/11/11/golang-2d-slice/"/>
    <id>https://andornot.xyz/2017/11/11/golang-2d-slice/</id>
    <published>2017-11-11T10:55:06.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list := <span class="built_in">make</span>([][]<span class="keyword">uint</span>, dy)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> list &#123;</span><br><span class="line">    list[i] = <span class="built_in">make</span>([]<span class="keyword">uint</span>, dx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
    
      <category term="Go" scheme="https://andornot.xyz/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>一行代码解决 PowerShell 蜂鸣问题</title>
    <link href="https://andornot.xyz/2017/11/01/powershell-disable-bell/"/>
    <id>https://andornot.xyz/2017/11/01/powershell-disable-bell/</id>
    <published>2017-11-01T10:41:46.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>在 Powershell 中执行一些操作会导致控制台出现蜂鸣的声音，以下有三种方式可以取消蜂鸣：</p><p><strong>在 PowerShell 中执行代码，即可取消按键蜂鸣问题</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-PSReadlineOption</span> -BellStyle None</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>解决 WSL 下声音的问题</strong></p><p>在 <code>~/.inputrc</code> 文件下添加 <code>set bell-style none</code> 代码</p><p><strong>修改系统设置的方法</strong></p><p>控制面板—&gt;硬件和声音—&gt;声音—&gt;选择声音—&gt;关键性停止的声音方案设为无</p><p>控制面板—&gt;硬件和声音—&gt;声音—&gt;选择声音—&gt;关键性停止的声音方案设为无</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Powershell 中执行一些操作会导致控制台出现蜂鸣的声音，以下有三种方式可以取消蜂鸣：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 PowerShell 中执行代码，即可取消按键蜂鸣问题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Set-PSReadlineOption&lt;/span&gt; -BellStyle None&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Powershell" scheme="https://andornot.xyz/tags/Powershell/"/>
    
  </entry>
  
  <entry>
    <title>Go 获取 golang.orgx 下依赖包的方法</title>
    <link href="https://andornot.xyz/2017/10/09/golang-get-golang.orgx-dependencies/"/>
    <id>https://andornot.xyz/2017/10/09/golang-get-golang.orgx-dependencies/</id>
    <published>2017-10-09T10:56:25.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Golang 在 Github 上建立的镜像库 <a href="https://github.com/golang/net" target="_blank" rel="noopener">golang/net</a><br>以 <code>golang.org/x/net</code> 为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/golang.org/x</span><br><span class="line">cd $GOPATH/src/golang.org/x</span><br><span class="line">git clone https://github.com/golang/net.git</span><br></pre></td></tr></table></figure><p>其它 <code>golang.org/x</code> 下的包获取皆可使用该方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Golang 在 Github 上建立的镜像库 &lt;a href=&quot;https://github.com/golang/net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;golang/net&lt;/a&gt;&lt;br&gt;以 &lt;code&gt;golang.org/x/
      
    
    </summary>
    
    
    
      <category term="Go" scheme="https://andornot.xyz/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码规范 (二)</title>
    <link href="https://andornot.xyz/2017/09/28/java-code-style-2/"/>
    <id>https://andornot.xyz/2017/09/28/java-code-style-2/</id>
    <published>2017-09-28T21:08:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中的集合处理是日常开发中比较常用的技术，手册中关于的集合部分也是开发中经常遇到的问题，因此这部分还是非常值得开发人员参考和学习的。</p><h3 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h3><ol><li><p>关于 <code>hashCode</code> 和 <code>equals</code> 的处理，遵顼以下规则：</p><ul><li>只要重写 <code>equals</code>，就必须重写 <code>hashCode</code></li><li>因为 <code>Set</code> 存储的是不重复的对象，依据 <code>hashCode</code> 和 <code>equals</code> 进行判断，所以 <code>Set</code> 存储的 对象必须重写这两个方法</li><li>如果自定义对象做为 <code>Map</code> 的键，那么必须重写 <code>hashCode</code> 和 <code>equals</code><a id="more"></a></li></ul></li><li><p>泛型通配符 <code>&lt;? extends T&gt;</code> 来接收返回的数据，此写法的泛型集合不能使用 <code>add</code> 方法。例如，苹果装箱后返回一个 <code>&lt;? extends Fruits&gt;</code> 对象，此对象就不能往里加任何水果包括苹果</p></li><li><p>不要在 <code>foreach</code> 循环里进行元素的 <code>remove / add</code> 操作。<code>remove</code> 元素请使用 <code>Iterator</code> 方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反例： </span></span><br><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;String&gt;(); </span><br><span class="line">a.add(<span class="string">"1"</span>); </span><br><span class="line">a.add(<span class="string">"2"</span>); </span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(temp)) &#123; </span><br><span class="line">        a.remove(temp);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例：</span></span><br><span class="line">Iterator&lt;String&gt; it = a.iterator(); </span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123; </span><br><span class="line">    String temp =</span><br><span class="line">    it.next();</span><br><span class="line">    <span class="keyword">if</span> (删除元素的条件) &#123; </span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 JDK7 版本以上，<code>Comparator</code> 要满足自反性，传递性，对称性，不然 <code>Arrays.sort， Collections.sort</code> 会报 <code>IllegalArgumentException</code> 异常</p></li><li><p>集合初始化时，尽量指定集合初始值大小</p></li><li><p>使用 <code>entrySet</code> 遍历 <code>Map</code> 类集合 KV，而不是 <code>keySet</code> 方式进行遍历。<code>keySet</code> 其实是遍历了 2 次，一次是转为 <code>Iterator</code> 对象，另一次是从 <code>hashMap</code> 中取出 <code>key</code> 所对应的 <code>value</code>。而 <code>entrySet</code> 只是遍历了一次就把 <code>key</code> 和 <code>value</code> 都放到了 <code>entry</code>中，效率更高，如果是 JDK8，使用 <code>Map.foreach</code> 方法。</p></li><li><p>高度注意 <code>Map</code> 类集合 <code>K/V</code> 能不能存储 <code>null</code> 值的情况</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 中的集合处理是日常开发中比较常用的技术，手册中关于的集合部分也是开发中经常遇到的问题，因此这部分还是非常值得开发人员参考和学习的。&lt;/p&gt;
&lt;h3 id=&quot;集合处理&quot;&gt;&lt;a href=&quot;#集合处理&quot; class=&quot;headerlink&quot; title=&quot;集合处理&quot;&gt;&lt;/a&gt;集合处理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;关于 &lt;code&gt;hashCode&lt;/code&gt; 和 &lt;code&gt;equals&lt;/code&gt; 的处理，遵顼以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要重写 &lt;code&gt;equals&lt;/code&gt;，就必须重写 &lt;code&gt;hashCode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;因为 &lt;code&gt;Set&lt;/code&gt; 存储的是不重复的对象，依据 &lt;code&gt;hashCode&lt;/code&gt; 和 &lt;code&gt;equals&lt;/code&gt; 进行判断，所以 &lt;code&gt;Set&lt;/code&gt; 存储的 对象必须重写这两个方法&lt;/li&gt;
&lt;li&gt;如果自定义对象做为 &lt;code&gt;Map&lt;/code&gt; 的键，那么必须重写 &lt;code&gt;hashCode&lt;/code&gt; 和 &lt;code&gt;equals&lt;/code&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="CodeStyle" scheme="https://andornot.xyz/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的序列化</title>
    <link href="https://andornot.xyz/2017/09/27/java-serialization/"/>
    <id>https://andornot.xyz/2017/09/27/java-serialization/</id>
    <published>2017-09-27T20:30:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>在日常的项目开发过程中可能会遇到序列化的问题，而且多半与数据的存储相关，同时的序列化的过程并不会在代码中的有过多的体现，很容易忽视它的存在，接下来将介绍序列化的概念以及序列化的用途。</p><h3 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h3><p>维基百科中的定义：<code>序列化（serialization）在计算机科学的资料处理中，是指将数据结构或物件状态转换成可取用格式（例如存成档案，存于缓冲，或经由网络中传送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始物件相同语义的副本。</code> 简单的来讲就是将某种数据结构或者对象转换成一种数据格式，数据格式可以通过网络传送或者存入数据库中，同时可以根据数据格式还原出原来的数据结构（反序列化）。在 Java 中，对象只有在 JVM 运行时才会存在，如果想要把对象存储到本地或者发送到远程的服务器，则必须通过序列化将对象转换成相应的子节然后进行存储或者传送，之后再将子节组装成对象。</p><a id="more"></a><h3 id="为什么需要序列化？"><a href="#为什么需要序列化？" class="headerlink" title="为什么需要序列化？"></a>为什么需要序列化？</h3><p>在以下场景中都会遇到序列化：</p><ul><li>将对象状态保存到文件或者数据库中</li><li>通过 socket 在网络中传送对象</li><li>通过 RMI (远程方法调用) 传输对象</li></ul><p>通过序列化将可以将一个复杂的对象转化成相应的子节，这为数据的持久化提供了方便，或者说是为持久化提供了前提条件。如果想要在网络中直接传送对象，服务器是无法判断传递对象的，无法通过 Java 的字节码识别出对象，所以必须将对象序列化，传送完成后在服务器端反序列化，服务器才可能正常地使用传递过来的对象。</p><h3 id="如何序列化？"><a href="#如何序列化？" class="headerlink" title="如何序列化？"></a>如何序列化？</h3><p>在 Java 中如果想要序列化，类必须实现 <code>Serializable</code> 接口，下面是一个简单的序列化和反序列化的例子：</p><p>需要序列化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> String userName;</span><br><span class="line">   <span class="keyword">public</span> String email;</span><br><span class="line">   <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.userName = <span class="string">"username"</span>;</span><br><span class="line">      user.eamil = <span class="string">"email"</span>;</span><br><span class="line">      user.password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"temp"</span>);</span><br><span class="line">         ObjectOutputStream nout = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br><span class="line">         out.writeObject(user);</span><br><span class="line">         out.close();</span><br><span class="line">         fileOut.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      User user = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"temp"</span>);</span><br><span class="line">         ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">         user = (User) in.readObject();</span><br><span class="line">         in.close();</span><br><span class="line">         fileIn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException c) &#123;</span><br><span class="line">         c.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常的项目开发过程中可能会遇到序列化的问题，而且多半与数据的存储相关，同时的序列化的过程并不会在代码中的有过多的体现，很容易忽视它的存在，接下来将介绍序列化的概念以及序列化的用途。&lt;/p&gt;
&lt;h3 id=&quot;什么是序列化？&quot;&gt;&lt;a href=&quot;#什么是序列化？&quot; class=&quot;headerlink&quot; title=&quot;什么是序列化？&quot;&gt;&lt;/a&gt;什么是序列化？&lt;/h3&gt;&lt;p&gt;维基百科中的定义：&lt;code&gt;序列化（serialization）在计算机科学的资料处理中，是指将数据结构或物件状态转换成可取用格式（例如存成档案，存于缓冲，或经由网络中传送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始物件相同语义的副本。&lt;/code&gt; 简单的来讲就是将某种数据结构或者对象转换成一种数据格式，数据格式可以通过网络传送或者存入数据库中，同时可以根据数据格式还原出原来的数据结构（反序列化）。在 Java 中，对象只有在 JVM 运行时才会存在，如果想要把对象存储到本地或者发送到远程的服务器，则必须通过序列化将对象转换成相应的子节然后进行存储或者传送，之后再将子节组装成对象。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>URL 与 URI</title>
    <link href="https://andornot.xyz/2017/09/26/url-and-uri/"/>
    <id>https://andornot.xyz/2017/09/26/url-and-uri/</id>
    <published>2017-09-26T20:26:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>在之前我遇到 <code>URI</code> 时并没有意识到它与 <code>URL</code> 不同，加上这两个名词的名称十分接近，在一些字体下 <code>I</code> 与 <code>L</code> 的表现十分相似，所以一直没有注意到 <code>URI</code>，只是单纯的知道有 <code>URL</code>。后来通过不同的方式才知道这连个名词是不一样的，现在是时候重新认识一下这两个名词了。</p><a id="more"></a><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>首先来看一下 <code>URI</code>，<code>URI</code> 的英文全称为 <strong>Uniform Resource Identifier</strong> 即 <strong>统一资源标识符</strong>，简单的说 <code>URI</code> 是用来唯一标识网络中的资源，起到资源的唯一标识作用。<code>URI</code> 强调资源的标识作用，可以类比成一个人的身份证号，一个 <code>URI</code> 一般有以下三部分构成:</p><ul><li>访问资源的命名机制</li><li>存放资源的主机名</li><li>资源自身的名称，由路径表示，着重强调于资源</li></ul><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p><code>URL</code> 全称为 <strong>Uniform Resource Location</strong> 即 <strong>统一资源定位符</strong>，<code>URL</code> 可以称为 <code>URI</code> 的子集，因为 <code>URL</code> 不仅标识了资源，还提供了访问相应资源的方法。例如一个站点网址中的 <code>http</code> 便是资源的访问方法，<code>URL</code> 更加强调资源是如何访问到的，可以类比成一个人的住址，一个 <code>URL</code> 一般由以下元素构成:</p><ul><li>协议(或称为服务方式)</li><li>存有该资源的主机IP地址(有时也包括端口号)</li><li>主机资源的具体地址。如目录和文件名等</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前我遇到 &lt;code&gt;URI&lt;/code&gt; 时并没有意识到它与 &lt;code&gt;URL&lt;/code&gt; 不同，加上这两个名词的名称十分接近，在一些字体下 &lt;code&gt;I&lt;/code&gt; 与 &lt;code&gt;L&lt;/code&gt; 的表现十分相似，所以一直没有注意到 &lt;code&gt;URI&lt;/code&gt;，只是单纯的知道有 &lt;code&gt;URL&lt;/code&gt;。后来通过不同的方式才知道这连个名词是不一样的，现在是时候重新认识一下这两个名词了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Networking" scheme="https://andornot.xyz/tags/Networking/"/>
    
      <category term="HTTP" scheme="https://andornot.xyz/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Java Bean 与 POJO</title>
    <link href="https://andornot.xyz/2017/09/25/java-bean-pojo/"/>
    <id>https://andornot.xyz/2017/09/25/java-bean-pojo/</id>
    <published>2017-09-25T19:23:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写项目时，想给领域模型中的类添加注释，自己首先想到的是将它们标记为 <code>Java Bean</code> 或者 <code>POJO</code>，知道它们在概念上很接近，但不知道这两者的具体区别，所以搜索了相关资料来谈一谈 <code>Java Bean</code> 和 <code>POJO</code> 以及其他相关的概念。</p><a id="more"></a><h3 id="Java-Bean"><a href="#Java-Bean" class="headerlink" title="Java Bean"></a>Java Bean</h3><p>只要学过 Java，不管是在学校里教的还是自学的都会或多或少地提过 <code>Java Bean</code> 的概念，他们会告诉你 <code>Java Bean</code> 是一个类，类里面封装了 <code>getter</code> 和 <code>setter</code> 方法，但这仅仅是一部分，一个完整的 <code>Java Bean</code> 至少满足以下的条件：</p><ul><li>有一个默认的 <code>public</code> 构造方法</li><li>类的属性通过 <code>get</code> 和 <code>set</code> 方法来访问，这意味着属性要设置为 <code>private</code>，同时 <code>get</code> 和 <code>set</code> 方法与属性名的大小也需要对应，例如 <code>public String getName() {}</code></li><li>类需要序列化，也就是需要继承 <code>Serializable</code> 接口</li></ul><h3 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h3><p><code>POJO</code> (Plain Old Java Object) 即简单 Java 对象，由 Martin Fowler 等人创造的，作为一种对普通 Java 对象的称呼。POJO 的包含的东西更加广泛，诸如 <code>PO</code> (<code>Persistant Object</code> 持久对象) <code>DTO</code> (<code>Data Transfer Object</code> 传输对象) <code>VO</code> (<code>View Object</code> 表现对象) 等都可以归为 POJO 的概念中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在实际的应用中两者的区别并不是太大，也没有必要特意强调两者的区别，同时一个 <code>Java</code> 对象既可以是 <code>Java Bean</code> 也可以是 <code>POJO</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写项目时，想给领域模型中的类添加注释，自己首先想到的是将它们标记为 &lt;code&gt;Java Bean&lt;/code&gt; 或者 &lt;code&gt;POJO&lt;/code&gt;，知道它们在概念上很接近，但不知道这两者的具体区别，所以搜索了相关资料来谈一谈 &lt;code&gt;Java Bean&lt;/code&gt; 和 &lt;code&gt;POJO&lt;/code&gt; 以及其他相关的概念。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码规范 (一)</title>
    <link href="https://andornot.xyz/2017/09/23/java-code-style-1%20/"/>
    <id>https://andornot.xyz/2017/09/23/java-code-style-1 /</id>
    <published>2017-09-23T16:30:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间阿里出了关于 Java 的 《阿里巴巴 Java 开发手册》，阿里作为国内 Java 技术领域内的带头者，其技术手册不管时对初学者还是从业者都是一份不可多得的材料。手册涉及大量的由一线开发人员总结的经验，我不可能将所有的内容读懂理解或者运用到实践中，这要涉及到大量的多个领域的工程实践。所以我将从一个初级或者中级的 Java 程序员的视角从手册中选取适当的内容进行归纳总结，同时由于内容比较多我将会分成多篇文章归纳。</p><a id="more"></a><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>变量或者函数命名也许是开发中最艰难的一个过程，这一部分并不教你如何命名，而是教你如何将变量或者函数名称变得既通俗易懂同时又符合规范。这里可以推荐一个网站也许可以解决你的命名烦恼 👉 <a href="https://unbug.github.io/codelf/" target="_blank" rel="noopener">CODELF</a></p><ol><li><p>类名使用 <code>UpperCamelCase</code> （大驼峰）风格，除领域模型的相关命名如：<code>DO</code> <code>DTO</code> 等</p></li><li><p>方法名、参数名、成员变量、局部变量统一使用 <code>lowerCamelCase</code> （小驼峰）风格</p></li><li><p>接口类中的方法和属性不要加任何修饰符号（<code>public</code> 也不要加），以保持代码的简洁性，并附加有效的 <code>Javadoc</code> 注释，尽量不要在接口中定义 变量</p></li><li><p><code>Service / DAO</code> 层方法命名规范</p><p>{0}. 获取单个对象的方法用 <code>get</code> 做前缀<br>{0}. 获取多个对象的方法用 <code>list</code> 做前缀<br>{0}. 获取统计值的方法用 <code>count</code> 做前缀<br>{0}. 插入的方法用 <code>save</code>（推荐）或 <code>insert</code> 做前缀<br>{0}. 删除的方法用 <code>remove</code>（推荐）或 <code>delete</code> 做前缀<br>{0}. 修改的方法用 <code>update</code> 做前缀</p></li><li><p>领域模型命名规约</p><p>{0}.  数据对象：<code>xxxDO</code>，<code>xxx</code> 即为数据表名<br>{0}.  数据传输对象：<code>xxxDTO</code>，<code>xxx</code> 为业务领域相关的名称<br>{0}.  展示对象：<code>xxxVO</code>，<code>xxx</code> 一般为网页名称<br>{0}.  <code>POJO</code> 是 <code>DO / DTO / BO / VO</code> 的统称，禁止命名成 <code>xxxPOJO</code></p></li></ol><h4 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h4><p>代码的格式规范可以在 IDE 里进行相应的设定，利用 IDE 的自动格式化便可以完成。这里的代码风格可能与你之前的习惯有一些出入，也许是有的地方没有注意到，或者习惯于另一种写法，最好从现在开始改变一些习惯，当完成过渡之后你会发现这会让你的代码更加条理，更加符合业内规范、更加优雅（雾</p><ol><li><p>大括号使用规范。如果是大括号内为空，则简洁地写成 {} 即可，不需要换行。如果 是非空代码块则：</p><ul><li>左大括号前不换行</li><li>左大括号后换行</li><li>右大括号前换行</li><li>右大括号后还有 <code>else</code> 等代码则不换行；表示终止右大括号后必须换行</li></ul></li><li><p>左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空 格</p></li><li><p><code>if / for / while / switch / do</code> 等保留字与左右括号之间都必须加空格</p></li><li><p>任何运算符左右必须加一个空格</p></li><li><p>缩进采用 4 个空格，禁止使用 <code>tab</code> 字符。如果使用 <code>tab</code> 缩进，必须设置 1 个 <code>tab</code> 为 4 个空格。IDEA 设置 <code>tab</code> 为 4 个空格时， 请勿勾选 Use tab character</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 缩进 4 个空格</span></span><br><span class="line">    String say = <span class="string">"hello"</span>; </span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格 </span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(say); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左大括号前加空格且不换行；左大括号后换行 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"world"</span>);</span><br><span class="line">    <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">    <span class="comment">// 在右大括号后直接结束，则必须换行 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p><ul><li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进</li><li>运算符与下文一起换行</li><li>方法调用的点符号与下文一起换行</li><li>在多个参数超长，逗号后进行换行</li><li>在括号前不要换行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">正例：</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line"><span class="comment">//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行</span></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)... </span><br><span class="line">    .append(<span class="string">"huang"</span>)... </span><br><span class="line">    .append(<span class="string">"huang"</span>)... </span><br><span class="line">    .append(<span class="string">"huang"</span>);</span><br><span class="line"></span><br><span class="line">反例：</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(); </span><br><span class="line"><span class="comment">//超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...append </span><br><span class="line">    (<span class="string">"huang"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行 </span></span><br><span class="line">method(args1, args2, args3, ...</span><br><span class="line">    , argsX);</span><br></pre></td></tr></table></figure></li><li><p>方法参数在定义和传入时，多个参数逗号后边必须加空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br></pre></td></tr></table></figure></li><li><p>IDE 的 text file encoding 设置为 UTF-8；IDE 中文件的换行符使用 Unix 格式，不要使用  Windows 格式</p></li><li><p>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义 之间插入一个空行。相同业务逻辑和语义之间不需要插入空行，没有必要插入多行空格进行隔开</p></li></ol><h4 id="OOP-规范"><a href="#OOP-规范" class="headerlink" title="OOP 规范"></a>OOP 规范</h4><p>这个没啥可说的，毕竟是无数人的踩坑经历，阅读全文并背诵（逃</p><ol><li><p>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成 本，直接用类名来访问即可</p></li><li><p>所有的覆写方法，必须加 <code>@Override</code> 注解</p></li><li><p>不能使用过时的类或方法</p></li><li><p><code>Object</code> 的 <code>equals</code> 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 <code>equals</code></p></li><li><p>所有的相同类型的包装类对象之间值的比较，全部使用 <code>equals</code> 方法比较</p></li><li><p><code>POJO</code> 类必须写 <code>toString</code> 方法，如果继承了另一个 <code>POJO</code> 类，注意在前面加一下 <code>super.toString</code></p></li><li><p>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起， 便于阅读</p></li><li><p>类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; <code>getter/setter</code> 方法</p></li><li><p><code>setter</code> 方法中，参数名称与类成员变量名称一致，<code>this.成员名=参数名</code></p></li><li><p>循环体内，字符串的联接方式，使用 <code>StringBuilder</code> 的 <code>append</code> 方法进行扩展</p></li><li><p><code>final</code> 可提高程序响应效率，声明成 <code>final</code> 的情况：</p><ul><li>不需要重新赋值的变量，包括类属性、局部变量</li><li>对象参数前加 <code>final</code>，表示不允许修改引用的指向</li><li>类方法确定不允许被重写</li></ul></li><li><p>类成员与方法访问控制从严：</p><ul><li>如果不允许外部直接通过 <code>new</code> 来创建对象，那么构造方法必须是 <code>private</code></li><li>工具类不允许有 <code>public</code> 或 <code>default</code> 构造方法</li><li>类非 <code>static</code> 成员变量并且与子类共享，必须是 <code>protected</code></li><li>类非 <code>static</code> 成员变量并且仅在本类使用，必须是 <code>private</code></li><li>类 <code>static</code> 成员变量如果仅在本类使用，必须是 <code>private</code></li><li>若是 <code>static</code> 成员变量，必须考虑是否为 <code>final</code></li><li>类成员方法只供类内部调用，必须是 <code>private</code></li><li>类成员方法只对继承类公开，那么限制为 <code>protected</code></li><li>慎用 <code>Object</code> 的 <code>clone</code> 方法来拷贝对象，对象的 <code>clone</code> 方法默认是浅拷贝，若想实现深拷贝需要重写 <code>clone</code> 方法实现属性对象 的拷贝</li><li>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 <code>init</code> 方法中</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;前段时间阿里出了关于 Java 的 《阿里巴巴 Java 开发手册》，阿里作为国内 Java 技术领域内的带头者，其技术手册不管时对初学者还是从业者都是一份不可多得的材料。手册涉及大量的由一线开发人员总结的经验，我不可能将所有的内容读懂理解或者运用到实践中，这要涉及到大量的多个领域的工程实践。所以我将从一个初级或者中级的 Java 程序员的视角从手册中选取适当的内容进行归纳总结，同时由于内容比较多我将会分成多篇文章归纳。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="CodeStyle" scheme="https://andornot.xyz/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>常用的排序算法 (中).md</title>
    <link href="https://andornot.xyz/2017/08/09/common-use-sort-algorithm-2/"/>
    <id>https://andornot.xyz/2017/08/09/common-use-sort-algorithm-2/</id>
    <published>2017-08-09T14:32:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>这次主要介绍<code>希尔排序</code>和<code>归并排序</code>，这两种算法与之前的初级排序算法不同，理解和实现起来都比之前稍微有些难度，但同时效率更高，在实际生产中有更广泛的应用。</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><code>希尔排序</code>基于插入排序算法，为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。希尔排序的思想是使数组中任意间隔为 <em>h</em> 的元素都是有序的。</p><a id="more"></a><h3 id="希尔排序实现"><a href="#希尔排序实现" class="headerlink" title="希尔排序实现"></a>希尔排序实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 希尔排序通过选择不同的步长间隔，对通过步长选择出的数组元素进行多次排序，</span></span><br><span class="line"><span class="comment"> * 当步长最终为 1 时完成对数组的排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-7-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组长度</span></span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="comment">// 步长间隔</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择合适的初始步长间隔</span></span><br><span class="line">        <span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过不同的步长间隔对数组多次排序</span></span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 以步长为间隔选择数组元素进行排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123;</span><br><span class="line">                    exch(a, j, j - h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 减少步长间隔</span></span><br><span class="line">            h = h / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个参数的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 比较的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 比较的第二个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 第一个参数比第二个小</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 第一个参数比第二个大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要交换操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 交换的第一个元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 交换的第二个元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示数组元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要显示的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable i : a) &#123;</span><br><span class="line">            StdOut.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查数组是否已经排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要检查的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 已经排序</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 没有排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (less(a[i], a[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试排序算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = In.readStrings();</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><code>归并排序</code>通过（递归地）将数组分成两半部分进行分别排序，然后将结果归并起来，基本思想是将两个有序数组归并成一个更大的有序数组。</p><h3 id="归并排序实现"><a href="#归并排序实现" class="headerlink" title="归并排序实现"></a>归并排序实现</h3><p>在代码实现中使用了两种方法实现，在自顶向下的排序中使用递归方式，在自底向上的排序中使用循环方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自顶向下的归并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定向下的归并排序通过递归把数组不断分割成多个小的连续数组，</span></span><br><span class="line"><span class="comment"> * 再将多个数组分别排序，最后将多个有序数组合并成一个有序的数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-7-2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于暂存的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部用于递归的归并排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lo 排序数组的最小下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hi 排序数组的最大下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 将数组分为两部分，对两部分分别排序</span></span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">// 归并操作</span></span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将两个有序数组归并为一个有序的数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要归并操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lo 归并数组的开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid 归并数组的中间下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hi 归并数组的结束下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 a[lo..hi] 复制到 aux[lo..hi]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归并回到 a[lo..hi]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个参数的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 比较的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 比较的第二个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 第一个参数比第二个小</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 第一个参数比第二个大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自底向上的归并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自底向上的归并排序通过把多个小的数组归并排序，逐渐完成整个数组的排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-7-2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于暂存的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz) &#123;</span><br><span class="line">                <span class="comment">// 归并数组</span></span><br><span class="line">                merge(a, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将两个有序数组归并为一个有序的数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要归并操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lo 归并数组的开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid 归并数组的中间下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hi 归并数组的结束下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 a[lo..hi] 复制到 aux[lo..hi]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归并回到 a[lo..hi]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个参数的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 比较的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 比较的第二个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 第一个参数比第二个小</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 第一个参数比第二个大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次主要介绍&lt;code&gt;希尔排序&lt;/code&gt;和&lt;code&gt;归并排序&lt;/code&gt;，这两种算法与之前的初级排序算法不同，理解和实现起来都比之前稍微有些难度，但同时效率更高，在实际生产中有更广泛的应用。&lt;/p&gt;
&lt;h3 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h3&gt;&lt;p&gt;&lt;code&gt;希尔排序&lt;/code&gt;基于插入排序算法，为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。希尔排序的思想是使数组中任意间隔为 &lt;em&gt;h&lt;/em&gt; 的元素都是有序的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="算法" scheme="https://andornot.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://andornot.xyz/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>常用的排序算法 (上).md</title>
    <link href="https://andornot.xyz/2017/08/08/common-use-sort-algorithm-1/"/>
    <id>https://andornot.xyz/2017/08/08/common-use-sort-algorithm-1/</id>
    <published>2017-08-08T15:46:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>在接下来的时间里主要介绍一下常用的排序算法，文章将分为上中下三篇，上篇主要介绍<code>插入排序</code>和<code>选择排序</code>，中篇主要介绍<code>归并排序</code>和<code>希尔排序</code>，下篇主要介绍<code>快速排序</code>和<code>堆排序</code>，文中的算法均使用 <code>Java</code> 来实现。</p><p>在常用的排序算法中比较容易理解和实现的是<code>插入排序</code>和<code>选择排序</code>，这两种排序算法实现和理解起来比较容易，但算法的效率并不是很高，下面看一下这两种排序算法。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><code>选择排序</code>通过寻找数组中最小的那个元素，将它和数组的第一个元素交换位置，然后在剩余的数组元素中找到最小的元素，将它与数组的第二个元素交换位置，重复这个步骤，直到整个数组有序。因为该算法不断地选择剩余元素中最小的一个，所以叫做<code>选择排序</code>。</p><p>通过对该算法的描述，在代码实现中需要使用一个循环来遍历整个数组，同时需要一个内部循环来寻找最小元素，所以该算法的时间复杂度应该为：$ N^2 $</p><a id="more"></a><h3 id="选择排序实现"><a href="#选择排序实现" class="headerlink" title="选择排序实现"></a>选择排序实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 选择排序将数组分成前后两部分，通过不断选择后半部分最小的元素，并将元素交换到</span></span><br><span class="line"><span class="comment"> * 后半部分的第一个元素上，此时前半部分已经有序且均小于后半部分，最后完成整个数组的排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-7-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">// 寻找后半部分最小的元素下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(a[j], a[min])) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将后半部分最小的元素交换到后半部分第一个元素</span></span><br><span class="line">            exch(a, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个参数的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 比较的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 比较的第二个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 第一个参数比第二个小</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 第一个参数比第二个大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要交换操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 交换的第一个元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 交换的第二个元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示数组元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要显示的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable i : a) &#123;</span><br><span class="line">            StdOut.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查数组是否已经排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要检查的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 已经排序</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 没有排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果存在降序的序列则数组没有排序</span></span><br><span class="line">            <span class="keyword">if</span> (less(a[i], a[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试排序算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = In.readStrings();</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><code>插入排序</code>通过在数组中已经有序的部分中选择一个合适的位置将数组元素插入到该位置上，为了给插入的元素腾出空间，需要将其余的元素在插入之前都向右移动一位。</p><p>同选择排序不同插入排序的所需时间取决于数组元素的初始顺序，插入排序的时间复杂度应在：$ N - N^2 $</p><h3 id="插入排序实现"><a href="#插入排序实现" class="headerlink" title="插入排序实现"></a>插入排序实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 插入排序算法将数组中的元素插入到已经排序</span></span><br><span class="line"><span class="comment"> * 好的序列的合适的位置上，来完成排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-7-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="comment">// 遍历整个数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="comment">// 查找下标 i 之前的元素，如果小于下标 i 的元素则交换两个元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个参数的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 比较的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 比较的第二个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 第一个参数比第二个小</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 第一个参数比第二个大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要交换操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 交换的第一个元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 交换的第二个元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示数组元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要显示的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable i : a) &#123;</span><br><span class="line">            StdOut.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查数组是否已经排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 需要检查的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 已经排序</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 没有排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果存在降序的序列则数组没有排序</span></span><br><span class="line">            <span class="keyword">if</span> (less(a[i], a[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试排序算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = In.readStrings();</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在接下来的时间里主要介绍一下常用的排序算法，文章将分为上中下三篇，上篇主要介绍&lt;code&gt;插入排序&lt;/code&gt;和&lt;code&gt;选择排序&lt;/code&gt;，中篇主要介绍&lt;code&gt;归并排序&lt;/code&gt;和&lt;code&gt;希尔排序&lt;/code&gt;，下篇主要介绍&lt;code&gt;快速排序&lt;/code&gt;和&lt;code&gt;堆排序&lt;/code&gt;，文中的算法均使用 &lt;code&gt;Java&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;p&gt;在常用的排序算法中比较容易理解和实现的是&lt;code&gt;插入排序&lt;/code&gt;和&lt;code&gt;选择排序&lt;/code&gt;，这两种排序算法实现和理解起来比较容易，但算法的效率并不是很高，下面看一下这两种排序算法。&lt;/p&gt;
&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;&lt;code&gt;选择排序&lt;/code&gt;通过寻找数组中最小的那个元素，将它和数组的第一个元素交换位置，然后在剩余的数组元素中找到最小的元素，将它与数组的第二个元素交换位置，重复这个步骤，直到整个数组有序。因为该算法不断地选择剩余元素中最小的一个，所以叫做&lt;code&gt;选择排序&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过对该算法的描述，在代码实现中需要使用一个循环来遍历整个数组，同时需要一个内部循环来寻找最小元素，所以该算法的时间复杂度应该为：$ N^2 $&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="算法" scheme="https://andornot.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://andornot.xyz/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单的算术表达式求值</title>
    <link href="https://andornot.xyz/2017/08/06/simple-arithmetic-expression-evaluation/"/>
    <id>https://andornot.xyz/2017/08/06/simple-arithmetic-expression-evaluation/</id>
    <published>2017-08-06T15:34:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>算术表达式求值是栈的一类简单应用，通常用来作为栈的讲解演示。一个简单的算术表达式通常由操作数、运算符和括号构成，运算符可能包含单目运算符和双目运算符，括号则代表相关运算的优先级。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>通过两个栈分别保存运算符和操作数，解析算数表达式，当遇到操作数时压入操作数栈，运算符时压入运算符栈，<br>如果语到左括号则忽略，遇到右括号时弹出一个运算符，根据运算符所需要的操作数数量弹出相应的操作数，运算完成后将结果压入操作数栈。</p><a id="more"></a><h3 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Dijkstra 双栈算法求算术表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-6-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存放算术表达式的运算符</span></span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 存放算术表达式的数值</span></span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取字符</span></span><br><span class="line">            String s = StdIn.readString();</span><br><span class="line">            <span class="comment">// 匹配字符</span></span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="comment">// 忽略表达式的 "("，匹配到算数运算符时将运算符压入栈</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"("</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"sqrt"</span>:</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 匹配到 ")" 时，进行相关运算</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">")"</span>:</span><br><span class="line">                    <span class="comment">// 获取运算符栈的栈顶元素</span></span><br><span class="line">                    String op = ops.pop();</span><br><span class="line">                    <span class="comment">// 获取数值栈的栈顶元素</span></span><br><span class="line">                    <span class="keyword">double</span> v = vals.pop();</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                      根据匹配的运算符进行相关运算</span></span><br><span class="line"><span class="comment">                      当匹配到双目运算符时，需要再从数值栈中取出数据进行双目运算</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                            v = vals.pop() + v;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                            v = vals.pop() - v;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                            v = vals.pop() * v;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                            v = vals.pop() / v;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"sqrt"</span>:</span><br><span class="line">                            v = Math.sqrt(v);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 数值入栈</span></span><br><span class="line">                    vals.push(v);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    vals.push(Double.parseDouble(s));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(vals.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算术表达式求值是栈的一类简单应用，通常用来作为栈的讲解演示。一个简单的算术表达式通常由操作数、运算符和括号构成，运算符可能包含单目运算符和双目运算符，括号则代表相关运算的优先级。&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;p&gt;通过两个栈分别保存运算符和操作数，解析算数表达式，当遇到操作数时压入操作数栈，运算符时压入运算符栈，&lt;br&gt;如果语到左括号则忽略，遇到右括号时弹出一个运算符，根据运算符所需要的操作数数量弹出相应的操作数，运算完成后将结果压入操作数栈。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="算法" scheme="https://andornot.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>队列与栈</title>
    <link href="https://andornot.xyz/2017/08/04/queue-and-stack/"/>
    <id>https://andornot.xyz/2017/08/04/queue-and-stack/</id>
    <published>2017-08-04T14:24:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机系统中队列和栈是常用的线性数据结构，在算法中有着广泛的应用，使用链表实现的队列和栈使它们兼顾性能和操作便利，队列和栈对链表节点的操作集中在链表的首部或尾部，下面看一下如何使用链表实现队列和栈。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>从定义上来看<code>队列是一种基于 FIFO （先进先出）策略的集合类型</code>，队列的每一个节点都存储相应的数据和下一个节点的信息。可以类比成实体世界中排队的情况，第一个排队的人优先获得相应的服务。</p><p><img src="https://github.com/igaozp/notes/blob/master/img/%E9%98%9F%E5%88%97.png?raw=true" alt="队列"></p><p>在代码实现中，通过在内部定义链表的节点类完成链表的构建，入队和出队操作均为基本链表操作。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用链表实现的 Queue 队列</span></span><br><span class="line"><span class="comment"> * Queue 队列是一种基于 FIFO 策略的集合类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-6-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;Item&gt; 泛型类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列的首节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列的最后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列元素的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部的链表节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查队列是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 队列为空</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 队列不为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查队列的元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向队列插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 插入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新增节点</span></span><br><span class="line">        Node oldLast = <span class="keyword">this</span>.last;</span><br><span class="line">        <span class="keyword">this</span>.last = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">this</span>.last.item = item;</span><br><span class="line">        <span class="keyword">this</span>.last.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 根据队列是否为空，选择插入队列的策略</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.first = <span class="keyword">this</span>.last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oldLast.next = <span class="keyword">this</span>.last;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新队列元素数量</span></span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首节点元素出队</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 出队的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取队列首节点元素，并使下一个元素成为队列的首节点</span></span><br><span class="line">        Item item = <span class="keyword">this</span>.first.item;</span><br><span class="line">        <span class="keyword">this</span>.first = <span class="keyword">this</span>.first.next;</span><br><span class="line">        <span class="comment">// 队列若为空，队列尾节点置空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新队列元素数量</span></span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 Iterable 接口的 iterator 函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 ListIterator 类用来实现 Iterable 接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查是否有下一个元素</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 有下一个元素</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@code</span> false&#125; 没有下一个元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取下一个元素</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Item&#125; 泛型类型的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>与队列不同<code>栈是一种基于 LIFO 策略的集合类型</code>，同样是采用链表作为代码实现，可以对应成实体世界中堆叠的盘子，新的盘子放在最上面，取盘子时取走最上面的盘子。</p><p><img src="https://github.com/igaozp/notes/blob/master/img/%E6%A0%88.png?raw=true" alt="栈"></p><p>栈与队列的代码实现基本上一致，只不过栈的入栈和出栈操作都在栈的首节点上完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stack 链表的实现</span></span><br><span class="line"><span class="comment"> * Stack 是一种基于 LIFO 策略的集合类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-6-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;Item&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈的顶部节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈的节点元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部的链表节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查栈是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 栈为空</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; 栈不为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查栈的节点元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 节点元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素压入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 入栈的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用头插法将元素入栈</span></span><br><span class="line">        Node oldFirst = <span class="keyword">this</span>.first;</span><br><span class="line">        <span class="keyword">this</span>.first = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">this</span>.first.item = item;</span><br><span class="line">        <span class="keyword">this</span>.first.next = oldFirst;</span><br><span class="line">        <span class="comment">// 更新节点数量</span></span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素出栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 出栈的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取头节点的元素，并更新头节点</span></span><br><span class="line">        Item item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="comment">// 更新节点的数量</span></span><br><span class="line">        N--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 Iterable 接口的 iterator 函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 ListIterator 用来实现 Iterable 接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查是否有下一个元素</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 有下一个元素</span></span><br><span class="line"><span class="comment">         *         &#123;<span class="doctag">@code</span> false&#125; 没有下一个元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取下一个元素</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Item&#125; 泛型类型的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机系统中队列和栈是常用的线性数据结构，在算法中有着广泛的应用，使用链表实现的队列和栈使它们兼顾性能和操作便利，队列和栈对链表节点的操作集中在链表的首部或尾部，下面看一下如何使用链表实现队列和栈。&lt;/p&gt;
&lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;从定义上来看&lt;code&gt;队列是一种基于 FIFO （先进先出）策略的集合类型&lt;/code&gt;，队列的每一个节点都存储相应的数据和下一个节点的信息。可以类比成实体世界中排队的情况，第一个排队的人优先获得相应的服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/igaozp/notes/blob/master/img/%E9%98%9F%E5%88%97.png?raw=true&quot; alt=&quot;队列&quot;&gt;&lt;/p&gt;
&lt;p&gt;在代码实现中，通过在内部定义链表的节点类完成链表的构建，入队和出队操作均为基本链表操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="算法" scheme="https://andornot.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://andornot.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用链表实现 Bag 背包类</title>
    <link href="https://andornot.xyz/2017/08/01/use-linked-list-write-bag-class/"/>
    <id>https://andornot.xyz/2017/08/01/use-linked-list-write-bag-class/</id>
    <published>2017-08-01T16:13:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用链表实现-Bag-背包类"><a href="#使用链表实现-Bag-背包类" class="headerlink" title="使用链表实现 Bag 背包类"></a>使用链表实现 Bag 背包类</h2><p><code>Bag</code> 背包类可以用于元素的收集和遍历，类似于 <code>Set</code> 集合，但不可以删除其中的元素。在 <code>Bag</code> 内部使用节点类 <code>Node</code> 来作为链表的每一个节点元素，同时使用链表基本的头插法来实现元素的插入，属于链表最基本、最基础的应用。为了实现元素的迭代， <code>Bag</code> 通过自定义的内部类 <code>ListIterator</code> 来实现 <code>Iterable</code> 接口。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bag 的链表实现</span></span><br><span class="line"><span class="comment"> * Bag 是一种不支持删除其中元素的集合数据类型，可以用来收集和遍历元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> igaozp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-6-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;Item&gt; 泛型类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 链表的首节点</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部的链表节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 向 &#123;<span class="doctag">@code</span> Bag&#125; 中添加的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用头插法插入新的元素</span></span><br><span class="line">        Node oldFirst = <span class="keyword">this</span>.first;</span><br><span class="line">        <span class="keyword">this</span>.first = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">this</span>.first.item = item;</span><br><span class="line">        <span class="keyword">this</span>.first.next = oldFirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 &#123;<span class="doctag">@code</span> Iterable&#125; 接口的 &#123;<span class="doctag">@code</span> iterator&#125; 函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> ListIterator&#125; 用来实现 &#123;<span class="doctag">@code</span> Iterable&#125; 接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查是否有下一个元素</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 有下一个元素</span></span><br><span class="line"><span class="comment">         *         &#123;<span class="doctag">@code</span> false&#125; 没有下一个元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移除元素，&#123;<span class="doctag">@code</span> Bag&#125; 中不需要实现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取下一个元素</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Item&#125; 泛型类型的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用链表实现-Bag-背包类&quot;&gt;&lt;a href=&quot;#使用链表实现-Bag-背包类&quot; class=&quot;headerlink&quot; title=&quot;使用链表实现 Bag 背包类&quot;&gt;&lt;/a&gt;使用链表实现 Bag 背包类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Bag&lt;/code&gt; 背包类可以用于元素的收集和遍历，类似于 &lt;code&gt;Set&lt;/code&gt; 集合，但不可以删除其中的元素。在 &lt;code&gt;Bag&lt;/code&gt; 内部使用节点类 &lt;code&gt;Node&lt;/code&gt; 来作为链表的每一个节点元素，同时使用链表基本的头插法来实现元素的插入，属于链表最基本、最基础的应用。为了实现元素的迭代， &lt;code&gt;Bag&lt;/code&gt; 通过自定义的内部类 &lt;code&gt;ListIterator&lt;/code&gt; 来实现 &lt;code&gt;Iterable&lt;/code&gt; 接口。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://andornot.xyz/tags/Java/"/>
    
      <category term="算法" scheme="https://andornot.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 常用语法教程</title>
    <link href="https://andornot.xyz/2017/06/20/markdown-common-grammar/"/>
    <id>https://andornot.xyz/2017/06/20/markdown-common-grammar/</id>
    <published>2017-06-20T13:21:23.000Z</published>
    <updated>2020-07-23T17:36:06.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br><span class="line"></span><br><span class="line">H1 H2 有额外的下划线样式:</span><br><span class="line"></span><br><span class="line">Alt-H1</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">Alt-H2</span><br><span class="line">------</span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>H1 H2 有额外的下划线样式:</p><h1 id="Alt-H1"><a href="#Alt-H1" class="headerlink" title="Alt-H1"></a>Alt-H1</h1><h2 id="Alt-H2"><a href="#Alt-H2" class="headerlink" title="Alt-H2"></a>Alt-H2</h2><a id="more"></a><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用 *星号* 或者 _下划线_ 进行斜体强调</span><br><span class="line"></span><br><span class="line">使用 **两个星号** 或者 __两条下划线__ 进行加粗强调</span><br><span class="line"></span><br><span class="line">使用 **星号 或者 _下划线_** 进行混合强调</span><br><span class="line"></span><br><span class="line">使用 ~~两条波浪线~~ 添加删除线效果</span><br></pre></td></tr></table></figure><p>使用 <em>星号</em> 或者 <em>下划线</em> 进行斜体强调</p><p>使用 <strong>两个星号</strong> 或者 <strong>两条下划线</strong> 进行加粗强调</p><p>使用 <strong>星号 或者 <em>下划线</em></strong> 进行混合强调</p><p>使用 <del>两条波浪线</del> 添加删除线效果</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>(在示例中，使用 . 来表示前导和尾随的空格)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表的第一个项目</span><br><span class="line">2. 另一个项目</span><br><span class="line">⋅⋅* 无序列表. </span><br><span class="line">1. 前面的数字无关紧要</span><br><span class="line">⋅⋅1. 有序的子列表</span><br><span class="line">4. 另一个项目.</span><br><span class="line"></span><br><span class="line">⋅⋅⋅在列表中你可以适当的缩进段落。 注意上面的空白行和前导空格.</span><br><span class="line"></span><br><span class="line">⋅⋅⋅想要在新段落里另起一行，要在尾部加两个空格⋅⋅</span><br><span class="line">⋅⋅⋅在同一段落里新的一行⋅⋅</span><br><span class="line"></span><br><span class="line">* 无序列表使用星号</span><br><span class="line">- 也可以使用减号</span><br><span class="line">+ 也可以使用加号</span><br></pre></td></tr></table></figure><ol><li><p>有序列表的第一个项目</p></li><li><p>另一个项目</p><ul><li>无序列表. </li></ul></li><li><p>前面的数字无关紧要</p><ol><li>有序的子列表</li></ol></li><li><p>另一个项目.</p><p>在列表中你可以适当的缩进段落。 注意上面的空白行和前导空格.</p><p>想要在新段落里另起一行，要在尾部加两个空格<br>在同一段落里新的一行  </p></li></ol><ul><li>无序列表使用星号</li></ul><ul><li>也可以使用减号</li></ul><ul><li>也可以使用加号</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>有两种方式可以创建链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[这是一个内联样式的链接](https://www.google.com)</span><br><span class="line"></span><br><span class="line">[这是一个有标题的内联样式的链接](https://www.google.com &quot;Google&apos;s Homepage&quot;)</span><br><span class="line"></span><br><span class="line">[这是一个引用样式的链接][Arbitrary case-insensitive reference text]</span><br><span class="line"></span><br><span class="line">[引用仓库相对地址的链接](../blob/master/LICENSE)</span><br><span class="line"></span><br><span class="line">[通过数字引用相关链接][1]</span><br><span class="line"></span><br><span class="line">或者留空自动引用相关链接[link text itself].</span><br><span class="line"></span><br><span class="line">URL或者尖括号中的URL将自动转换成相应的链接 https://github.com 或者 &lt;https://github.com&gt;</span><br><span class="line"></span><br><span class="line">引用链接的相关文本</span><br><span class="line"></span><br><span class="line">[arbitrary case-insensitive reference text]: https://www.mozilla.org</span><br><span class="line">[1]: http://github.com</span><br><span class="line">[link text itself]: http://www.youtube.com</span><br></pre></td></tr></table></figure><p><a href="https://www.google.com" target="_blank" rel="noopener">这是一个内联样式的链接</a></p><p><a href="https://www.google.com" target="_blank" rel="noopener" title="Google&#39;s Homepage">这是一个有标题的内联样式的链接</a></p><p><a href="https://www.mozilla.org" target="_blank" rel="noopener">这是一个引用样式的链接</a></p><p><a href="../blob/master/LICENSE">引用仓库相对地址的链接</a></p><p><a href="http://github.com" target="_blank" rel="noopener">通过数字引用相关链接</a></p><p>或者留空自动引用相关链接<a href="http://www.youtube.com" target="_blank" rel="noopener">link text itself</a>.</p><p>URL或者尖括号中的URL将自动转换成相应的链接 <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 或者 <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><p>引用链接的相关文本</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">内联样式: </span><br><span class="line">![alt text](https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png &quot;图片文字&quot;)</span><br><span class="line"></span><br><span class="line">引用样式: </span><br><span class="line">![alt text][logo]</span><br><span class="line"></span><br><span class="line">[logo]: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png &quot;图片文字&quot;</span><br></pre></td></tr></table></figure><p>内联样式:<br><img src="https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png" alt="alt text" title="图片文字"></p><p>引用样式:<br><img src="https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png" alt="alt text" title="图片文字"></p><h2 id="代码语法及高亮"><a href="#代码语法及高亮" class="headerlink" title="代码语法及高亮"></a>代码语法及高亮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 `单反引号` 来显示 `代码`</span><br></pre></td></tr></table></figure><p>使用 <code>单反引号</code> 来显示 <code>代码</code> </p><p>代码块可以在开头使用三个单反引号 <code>```</code>, 或者使用四个空格.</p><pre lang="no-highlight"><code>```javascriptvar s = "JavaScript 语法高亮";alert(s);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">```python</span><br><span class="line">s = &quot;Python 语法高亮&quot;</span><br><span class="line">print s</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript 语法高亮"</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python 语法高亮"</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">冒号决定表格内容的对齐方向</span><br><span class="line"></span><br><span class="line">| Table 1 | Table 2  | Table 3 |</span><br><span class="line">| ------- |:--------:| -------:|</span><br><span class="line">| left    |  center  | right   |</span><br><span class="line"></span><br><span class="line">每个表头单元格至少三个破折号，表格中可以内联其他的样式</span><br><span class="line"></span><br><span class="line">Markdown | Less | Pretty</span><br><span class="line">--- | --- | ---</span><br><span class="line">*Still* | `renders` | **nicely**</span><br><span class="line">1 | 2 | 3</span><br></pre></td></tr></table></figure><p>冒号决定表格内容的对齐方向</p><table><thead><tr><th>Table 1</th><th align="center">Table 2</th><th align="right">Table 3</th></tr></thead><tbody><tr><td>left</td><td align="center">center</td><td align="right">right</td></tr></tbody></table><p>每个表头单元格至少三个破折号，表格中可以内联其他的样式</p><table><thead><tr><th>Markdown</th><th>Less</th><th>Pretty</th></tr></thead><tbody><tr><td><em>Still</em></td><td><code>renders</code></td><td><strong>nicely</strong></td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个单行引用</span><br><span class="line"></span><br><span class="line">多行引用</span><br><span class="line"></span><br><span class="line">&gt; 这是一句非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子，自动转化为多行引用。</span><br></pre></td></tr></table></figure><blockquote><p>这是一个单行引用</p></blockquote><p>多行引用</p><blockquote><p>这是一句非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的句子，自动转化为多行引用。</p></blockquote><h2 id="内联-HTML"><a href="#内联-HTML" class="headerlink" title="内联 HTML"></a>内联 HTML</h2><p>在 Markdown 也可以书写原生的 HTML 页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;Definition list&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><dl>  <dt>Definition list</dt>  <dd>Is something people use sometimes.</dd>  <dt>Markdown in HTML</dt>  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd></dl><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">至少需要三个相应的字符</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">使用连字符</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">使用星号</span><br><span class="line"></span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">使用下划线</span><br></pre></td></tr></table></figure><p>至少需要三个相应的字符</p><hr><p>使用连字符</p><hr><p>使用星号</p><hr><p>使用下划线</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>单次点击回车会完成换行操作，两次点击回车会完成更换段落的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这是一句话</span><br><span class="line"></span><br><span class="line">这也是一句话，点击两次回车后这句话属于新的一行</span><br><span class="line"></span><br><span class="line">这是一句话</span><br><span class="line">这是也是一句话，点击一次回车后这句话还是在同一行中</span><br></pre></td></tr></table></figure><p>这是一句话</p><p>这也是一句话，点击两次回车后这句话属于新的一行</p><p>这是一句话<br>这是也是一句话，点击一次回车后这句话还是在同一行中</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# H1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## H2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### H3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### H4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### H5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###### H6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H1 H2 有额外的下划线样式:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt-H1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;======&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alt-H2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;H1&quot;&gt;&lt;a href=&quot;#H1&quot; class=&quot;headerlink&quot; title=&quot;H1&quot;&gt;&lt;/a&gt;H1&lt;/h1&gt;&lt;h2 id=&quot;H2&quot;&gt;&lt;a href=&quot;#H2&quot; class=&quot;headerlink&quot; title=&quot;H2&quot;&gt;&lt;/a&gt;H2&lt;/h2&gt;&lt;h3 id=&quot;H3&quot;&gt;&lt;a href=&quot;#H3&quot; class=&quot;headerlink&quot; title=&quot;H3&quot;&gt;&lt;/a&gt;H3&lt;/h3&gt;&lt;h4 id=&quot;H4&quot;&gt;&lt;a href=&quot;#H4&quot; class=&quot;headerlink&quot; title=&quot;H4&quot;&gt;&lt;/a&gt;H4&lt;/h4&gt;&lt;h5 id=&quot;H5&quot;&gt;&lt;a href=&quot;#H5&quot; class=&quot;headerlink&quot; title=&quot;H5&quot;&gt;&lt;/a&gt;H5&lt;/h5&gt;&lt;h6 id=&quot;H6&quot;&gt;&lt;a href=&quot;#H6&quot; class=&quot;headerlink&quot; title=&quot;H6&quot;&gt;&lt;/a&gt;H6&lt;/h6&gt;&lt;p&gt;H1 H2 有额外的下划线样式:&lt;/p&gt;
&lt;h1 id=&quot;Alt-H1&quot;&gt;&lt;a href=&quot;#Alt-H1&quot; class=&quot;headerlink&quot; title=&quot;Alt-H1&quot;&gt;&lt;/a&gt;Alt-H1&lt;/h1&gt;&lt;h2 id=&quot;Alt-H2&quot;&gt;&lt;a href=&quot;#Alt-H2&quot; class=&quot;headerlink&quot; title=&quot;Alt-H2&quot;&gt;&lt;/a&gt;Alt-H2&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Markdown" scheme="https://andornot.xyz/tags/Markdown/"/>
    
  </entry>
  
</feed>
